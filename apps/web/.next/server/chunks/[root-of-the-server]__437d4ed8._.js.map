{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///D:/intel/web3ssh/DeStock/apps/web/lib/utils/chartData.ts"],"sourcesContent":["// Utility functions for generating and managing chart data\r\n\r\nexport interface OHLCData {\r\n  time: number;\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  volume?: number;\r\n}\r\n\r\nexport interface IndicatorData {\r\n  time: number;\r\n  value: number;\r\n}\r\n\r\nexport interface ChartData {\r\n  ohlc: OHLCData[];\r\n  volume: { time: number; value: number; color?: string }[];\r\n  sma?: IndicatorData[];\r\n  ema?: IndicatorData[];\r\n  rsi?: IndicatorData[];\r\n  macd?: {\r\n    time: number;\r\n    macd: number;\r\n    signal: number;\r\n    histogram: number;\r\n  }[];\r\n}\r\n\r\n// Generate realistic OHLC data\r\nexport function generateOHLCData(\r\n  days: number = 30,\r\n  startPrice: number = 100,\r\n  volatility: number = 0.02\r\n): OHLCData[] {\r\n  const data: OHLCData[] = [];\r\n  let currentPrice = startPrice;\r\n  const now = Date.now();\r\n  const dayMs = 24 * 60 * 60 * 1000;\r\n\r\n  for (let i = days; i >= 0; i--) {\r\n    const time = now - (i * dayMs);\r\n    \r\n    // Generate random price movements\r\n    const change = (Math.random() - 0.5) * volatility * currentPrice;\r\n    const open = currentPrice;\r\n    const close = open + change;\r\n    \r\n    // Generate high and low based on open and close\r\n    const maxPrice = Math.max(open, close);\r\n    const minPrice = Math.min(open, close);\r\n    const high = maxPrice + Math.random() * 0.01 * currentPrice;\r\n    const low = minPrice - Math.random() * 0.01 * currentPrice;\r\n    \r\n    // Generate volume (higher volume on bigger price changes)\r\n    const volume = Math.floor(\r\n      (10000 + Math.random() * 50000) * (1 + Math.abs(change) / currentPrice * 5)\r\n    );\r\n\r\n    data.push({\r\n      time: Math.floor(time / 1000), // Lightweight Charts expects seconds\r\n      open: Number(open.toFixed(2)),\r\n      high: Number(high.toFixed(2)),\r\n      low: Number(low.toFixed(2)),\r\n      close: Number(close.toFixed(2)),\r\n      volume,\r\n    });\r\n\r\n    currentPrice = close;\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n// Calculate Simple Moving Average\r\nexport function calculateSMA(data: OHLCData[], period: number = 20): IndicatorData[] {\r\n  const sma: IndicatorData[] = [];\r\n  \r\n  for (let i = period - 1; i < data.length; i++) {\r\n    let sum = 0;\r\n    for (let j = i - period + 1; j <= i; j++) {\r\n      sum += data[j].close;\r\n    }\r\n    \r\n    sma.push({\r\n      time: data[i].time,\r\n      value: Number((sum / period).toFixed(2)),\r\n    });\r\n  }\r\n  \r\n  return sma;\r\n}\r\n\r\n// Calculate Exponential Moving Average\r\nexport function calculateEMA(data: OHLCData[], period: number = 20): IndicatorData[] {\r\n  const ema: IndicatorData[] = [];\r\n  const multiplier = 2 / (period + 1);\r\n  \r\n  // Start with SMA for the first value\r\n  let sum = 0;\r\n  for (let i = 0; i < period; i++) {\r\n    sum += data[i].close;\r\n  }\r\n  \r\n  ema.push({\r\n    time: data[period - 1].time,\r\n    value: Number((sum / period).toFixed(2)),\r\n  });\r\n  \r\n  // Calculate EMA for the rest\r\n  for (let i = period; i < data.length; i++) {\r\n    const value = (data[i].close - ema[ema.length - 1].value) * multiplier + ema[ema.length - 1].value;\r\n    ema.push({\r\n      time: data[i].time,\r\n      value: Number(value.toFixed(2)),\r\n    });\r\n  }\r\n  \r\n  return ema;\r\n}\r\n\r\n// Calculate RSI (Relative Strength Index)\r\nexport function calculateRSI(data: OHLCData[], period: number = 14): IndicatorData[] {\r\n  const rsi: IndicatorData[] = [];\r\n  const gains: number[] = [];\r\n  const losses: number[] = [];\r\n  \r\n  // Calculate gains and losses\r\n  for (let i = 1; i < data.length; i++) {\r\n    const change = data[i].close - data[i - 1].close;\r\n    gains.push(change > 0 ? change : 0);\r\n    losses.push(change < 0 ? -change : 0);\r\n  }\r\n  \r\n  // Calculate initial average gain and loss\r\n  let avgGain = gains.slice(0, period).reduce((a, b) => a + b, 0) / period;\r\n  let avgLoss = losses.slice(0, period).reduce((a, b) => a + b, 0) / period;\r\n  \r\n  // Calculate RSI\r\n  for (let i = period; i < data.length; i++) {\r\n    const rs = avgGain / avgLoss;\r\n    const rsiValue = 100 - (100 / (1 + rs));\r\n    \r\n    rsi.push({\r\n      time: data[i].time,\r\n      value: Number(rsiValue.toFixed(2)),\r\n    });\r\n    \r\n    // Update average gain and loss for next iteration\r\n    if (i < data.length - 1) {\r\n      const change = data[i + 1].close - data[i].close;\r\n      const gain = change > 0 ? change : 0;\r\n      const loss = change < 0 ? -change : 0;\r\n      \r\n      avgGain = (avgGain * (period - 1) + gain) / period;\r\n      avgLoss = (avgLoss * (period - 1) + loss) / period;\r\n    }\r\n  }\r\n  \r\n  return rsi;\r\n}\r\n\r\n// Generate volume data with colors\r\nexport function generateVolumeData(ohlcData: OHLCData[]): { time: number; value: number; color?: string }[] {\r\n  return ohlcData.map((candle, index) => {\r\n    const prevCandle = index > 0 ? ohlcData[index - 1] : candle;\r\n    const isUp = candle.close > prevCandle.close;\r\n    \r\n    return {\r\n      time: candle.time,\r\n      value: candle.volume || 0,\r\n      color: isUp ? '#00D4AA' : '#F6465D', // Success green for up, danger red for down\r\n    };\r\n  });\r\n}\r\n\r\n// Generate mock company data\r\nexport function generateCompanyData(count: number = 20) {\r\n  const companies = [\r\n    'Apple Inc.', 'Microsoft Corp.', 'Amazon.com Inc.', 'Alphabet Inc.',\r\n    'Tesla Inc.', 'Meta Platforms', 'NVIDIA Corp.', 'Netflix Inc.',\r\n    'PayPal Holdings', 'Adobe Inc.', 'Salesforce Inc.', 'Zoom Video',\r\n    'Spotify Technology', 'Uber Technologies', 'Airbnb Inc.', 'Twitter Inc.',\r\n    'Snap Inc.', 'Pinterest Inc.', 'Shopify Inc.', 'Square Inc.',\r\n  ];\r\n  \r\n  const sectors = [\r\n    'Technology', 'Consumer Discretionary', 'Communication Services',\r\n    'Healthcare', 'Financials', 'Industrials', 'Consumer Staples',\r\n  ];\r\n  \r\n  return Array.from({ length: Math.min(count, companies.length) }, (_, index) => {\r\n    const basePrice = 50 + Math.random() * 200;\r\n    const change = (Math.random() - 0.5) * 0.1 * basePrice;\r\n    const changePercent = (change / basePrice) * 100;\r\n    \r\n    return {\r\n      id: index,\r\n      name: companies[index],\r\n      symbol: companies[index].split(' ')[0].slice(0, 4).toUpperCase(),\r\n      sector: sectors[Math.floor(Math.random() * sectors.length)],\r\n      price: Number(basePrice.toFixed(2)),\r\n      change: Number(change.toFixed(2)),\r\n      changePercent: Number(changePercent.toFixed(2)),\r\n      volume: Math.floor(Math.random() * 1000000) + 100000,\r\n      marketCap: Math.floor((basePrice * (Math.random() * 1000000 + 100000)) / 1000) * 1000,\r\n      chartData: generateOHLCData(30, basePrice, 0.02),\r\n    };\r\n  });\r\n}\r\n\r\n// Generate portfolio data\r\nexport function generatePortfolioData() {\r\n  const holdings = generateCompanyData(8).map((company, index) => {\r\n    const shares = Math.floor(Math.random() * 100) + 10;\r\n    const avgCost = company.price * (0.8 + Math.random() * 0.4); // Â±20% from current price\r\n    const totalValue = shares * company.price;\r\n    const totalCost = shares * avgCost;\r\n    const pnl = totalValue - totalCost;\r\n    const pnlPercent = (pnl / totalCost) * 100;\r\n    \r\n    return {\r\n      ...company,\r\n      shares,\r\n      avgCost: Number(avgCost.toFixed(2)),\r\n      totalValue: Number(totalValue.toFixed(2)),\r\n      totalCost: Number(totalCost.toFixed(2)),\r\n      pnl: Number(pnl.toFixed(2)),\r\n      pnlPercent: Number(pnlPercent.toFixed(2)),\r\n    };\r\n  });\r\n  \r\n  const totalValue = holdings.reduce((sum, holding) => sum + holding.totalValue, 0);\r\n  const totalCost = holdings.reduce((sum, holding) => sum + holding.totalCost, 0);\r\n  const totalPnL = totalValue - totalCost;\r\n  const totalPnLPercent = (totalPnL / totalCost) * 100;\r\n  \r\n  return {\r\n    holdings,\r\n    summary: {\r\n      totalValue: Number(totalValue.toFixed(2)),\r\n      totalCost: Number(totalCost.toFixed(2)),\r\n      totalPnL: Number(totalPnL.toFixed(2)),\r\n      totalPnLPercent: Number(totalPnLPercent.toFixed(2)),\r\n      dayChange: Number((totalValue * (Math.random() - 0.5) * 0.02).toFixed(2)),\r\n      dayChangePercent: Number(((Math.random() - 0.5) * 2).toFixed(2)),\r\n    },\r\n  };\r\n}\r\n\r\n// Real-time data simulation\r\nexport function createRealTimeDataStream(\r\n  initialData: OHLCData[],\r\n  callback: (newData: OHLCData) => void,\r\n  interval: number = 5000\r\n) {\r\n  const lastCandle = initialData[initialData.length - 1];\r\n  let currentPrice = lastCandle.close;\r\n  \r\n  const generateNextCandle = () => {\r\n    const now = Math.floor(Date.now() / 1000);\r\n    const change = (Math.random() - 0.5) * 0.02 * currentPrice;\r\n    const open = currentPrice;\r\n    const close = open + change;\r\n    const high = Math.max(open, close) + Math.random() * 0.005 * currentPrice;\r\n    const low = Math.min(open, close) - Math.random() * 0.005 * currentPrice;\r\n    const volume = Math.floor(Math.random() * 50000) + 10000;\r\n    \r\n    const newCandle: OHLCData = {\r\n      time: now,\r\n      open: Number(open.toFixed(2)),\r\n      high: Number(high.toFixed(2)),\r\n      low: Number(low.toFixed(2)),\r\n      close: Number(close.toFixed(2)),\r\n      volume,\r\n    };\r\n    \r\n    currentPrice = close;\r\n    callback(newCandle);\r\n  };\r\n  \r\n  const intervalId = setInterval(generateNextCandle, interval);\r\n  \r\n  return () => clearInterval(intervalId);\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 297, "column": 0}, "map": {"version":3,"sources":["file:///D:/intel/web3ssh/DeStock/apps/web/app/api/market/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { generateOHLCData, generateCompanyData, calculateSMA, calculateEMA, calculateRSI, generateVolumeData } from '@/lib/utils/chartData';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const symbol = searchParams.get('symbol');\r\n    const timeframe = searchParams.get('timeframe') || '1D';\r\n    const days = parseInt(searchParams.get('days') || '30');\r\n    const type = searchParams.get('type') || 'overview';\r\n\r\n    // Simulate network delay for realism\r\n    await new Promise(resolve => setTimeout(resolve, Math.random() * 500 + 200));\r\n\r\n    if (type === 'companies') {\r\n      const companies = generateCompanyData(20);\r\n      return NextResponse.json({ companies });\r\n    }\r\n\r\n    if (type === 'ticker') {\r\n      // Generate ticker data for multiple companies\r\n      const companies = generateCompanyData(10);\r\n      const tickerData = companies.map(company => ({\r\n        symbol: company.symbol,\r\n        name: company.name,\r\n        price: company.price,\r\n        change: company.change,\r\n        changePercent: company.changePercent,\r\n        volume: company.volume,\r\n      }));\r\n      \r\n      return NextResponse.json({ ticker: tickerData });\r\n    }\r\n\r\n    if (type === 'heatmap') {\r\n      // Generate heatmap data\r\n      const companies = generateCompanyData(12);\r\n      const heatmap = companies.map((company, index) => ({\r\n        id: index.toString(),\r\n        name: company.name,\r\n        symbol: company.symbol,\r\n        value: company.price,\r\n        change: company.changePercent,\r\n        size: Math.min(Math.max((company.marketCap / 1000000000) * 50 + 40, 40), 120) // Scale market cap to size\r\n      }));\r\n      \r\n      return NextResponse.json({ heatmap });\r\n    }\r\n\r\n    if (symbol && type === 'chart') {\r\n      // Generate chart data for specific symbol\r\n      const basePrice = 100 + Math.random() * 100;\r\n      const ohlcData = generateOHLCData(days, basePrice, 0.025);\r\n      const volumeData = generateVolumeData(ohlcData);\r\n      const sma = calculateSMA(ohlcData, 20);\r\n      const ema = calculateEMA(ohlcData, 20);\r\n      const rsi = calculateRSI(ohlcData, 14);\r\n\r\n      // Calculate MACD (simplified)\r\n      const emaFast = calculateEMA(ohlcData, 12);\r\n      const emaSlow = calculateEMA(ohlcData, 26);\r\n      const macd = emaFast.map((fast, index) => {\r\n        const slow = emaSlow.find(s => s.time === fast.time);\r\n        if (!slow) return null;\r\n        \r\n        const macdValue = fast.value - slow.value;\r\n        return {\r\n          time: fast.time,\r\n          macd: Number(macdValue.toFixed(4)),\r\n          signal: 0, // Simplified - would need EMA of MACD\r\n          histogram: Number(macdValue.toFixed(4)),\r\n        };\r\n      }).filter(Boolean);\r\n\r\n      return NextResponse.json({\r\n        symbol,\r\n        timeframe,\r\n        data: {\r\n          ohlc: ohlcData,\r\n          volume: volumeData,\r\n          indicators: {\r\n            sma,\r\n            ema,\r\n            rsi,\r\n            macd,\r\n          },\r\n        },\r\n      });\r\n    }\r\n\r\n    // Default market overview\r\n    const companies = generateCompanyData(15);\r\n    const marketStats = {\r\n      totalMarketCap: companies.reduce((sum, c) => sum + c.marketCap, 0),\r\n      totalVolume: companies.reduce((sum, c) => sum + c.volume, 0),\r\n      gainers: companies.filter(c => c.change > 0).length,\r\n      losers: companies.filter(c => c.change < 0).length,\r\n      unchanged: companies.filter(c => c.change === 0).length,\r\n    };\r\n\r\n    return NextResponse.json({\r\n      companies,\r\n      stats: marketStats,\r\n      timestamp: Date.now(),\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Market API error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to fetch market data' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const body = await request.json();\r\n    const { action, symbol, quantity, price } = body;\r\n\r\n    // Simulate trade execution\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n    if (action === 'buy' || action === 'sell') {\r\n      const executionPrice = price * (1 + (Math.random() - 0.5) * 0.001); // Small slippage\r\n      \r\n      return NextResponse.json({\r\n        success: true,\r\n        transaction: {\r\n          id: Math.random().toString(36).substr(2, 9),\r\n          symbol,\r\n          action,\r\n          quantity,\r\n          requestedPrice: price,\r\n          executedPrice: Number(executionPrice.toFixed(2)),\r\n          timestamp: Date.now(),\r\n          status: 'executed',\r\n        },\r\n      });\r\n    }\r\n\r\n    return NextResponse.json(\r\n      { error: 'Invalid action' },\r\n      { status: 400 }\r\n    );\r\n\r\n  } catch (error) {\r\n    console.error('Market API POST error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to process request' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,SAAS,aAAa,GAAG,CAAC;QAChC,MAAM,YAAY,aAAa,GAAG,CAAC,gBAAgB;QACnD,MAAM,OAAO,SAAS,aAAa,GAAG,CAAC,WAAW;QAClD,MAAM,OAAO,aAAa,GAAG,CAAC,WAAW;QAEzC,qCAAqC;QACrC,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS,KAAK,MAAM,KAAK,MAAM;QAEvE,IAAI,SAAS,aAAa;YACxB,MAAM,YAAY,CAAA,GAAA,0IAAA,CAAA,sBAAmB,AAAD,EAAE;YACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE;YAAU;QACvC;QAEA,IAAI,SAAS,UAAU;YACrB,8CAA8C;YAC9C,MAAM,YAAY,CAAA,GAAA,0IAAA,CAAA,sBAAmB,AAAD,EAAE;YACtC,MAAM,aAAa,UAAU,GAAG,CAAC,CAAA,UAAW,CAAC;oBAC3C,QAAQ,QAAQ,MAAM;oBACtB,MAAM,QAAQ,IAAI;oBAClB,OAAO,QAAQ,KAAK;oBACpB,QAAQ,QAAQ,MAAM;oBACtB,eAAe,QAAQ,aAAa;oBACpC,QAAQ,QAAQ,MAAM;gBACxB,CAAC;YAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,QAAQ;YAAW;QAChD;QAEA,IAAI,SAAS,WAAW;YACtB,wBAAwB;YACxB,MAAM,YAAY,CAAA,GAAA,0IAAA,CAAA,sBAAmB,AAAD,EAAE;YACtC,MAAM,UAAU,UAAU,GAAG,CAAC,CAAC,SAAS,QAAU,CAAC;oBACjD,IAAI,MAAM,QAAQ;oBAClB,MAAM,QAAQ,IAAI;oBAClB,QAAQ,QAAQ,MAAM;oBACtB,OAAO,QAAQ,KAAK;oBACpB,QAAQ,QAAQ,aAAa;oBAC7B,MAAM,KAAK,GAAG,CAAC,KAAK,GAAG,CAAC,AAAC,QAAQ,SAAS,GAAG,aAAc,KAAK,IAAI,KAAK,KAAK,2BAA2B;gBAC3G,CAAC;YAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE;YAAQ;QACrC;QAEA,IAAI,UAAU,SAAS,SAAS;YAC9B,0CAA0C;YAC1C,MAAM,YAAY,MAAM,KAAK,MAAM,KAAK;YACxC,MAAM,WAAW,CAAA,GAAA,0IAAA,CAAA,mBAAgB,AAAD,EAAE,MAAM,WAAW;YACnD,MAAM,aAAa,CAAA,GAAA,0IAAA,CAAA,qBAAkB,AAAD,EAAE;YACtC,MAAM,MAAM,CAAA,GAAA,0IAAA,CAAA,eAAY,AAAD,EAAE,UAAU;YACnC,MAAM,MAAM,CAAA,GAAA,0IAAA,CAAA,eAAY,AAAD,EAAE,UAAU;YACnC,MAAM,MAAM,CAAA,GAAA,0IAAA,CAAA,eAAY,AAAD,EAAE,UAAU;YAEnC,8BAA8B;YAC9B,MAAM,UAAU,CAAA,GAAA,0IAAA,CAAA,eAAY,AAAD,EAAE,UAAU;YACvC,MAAM,UAAU,CAAA,GAAA,0IAAA,CAAA,eAAY,AAAD,EAAE,UAAU;YACvC,MAAM,OAAO,QAAQ,GAAG,CAAC,CAAC,MAAM;gBAC9B,MAAM,OAAO,QAAQ,IAAI,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK,KAAK,IAAI;gBACnD,IAAI,CAAC,MAAM,OAAO;gBAElB,MAAM,YAAY,KAAK,KAAK,GAAG,KAAK,KAAK;gBACzC,OAAO;oBACL,MAAM,KAAK,IAAI;oBACf,MAAM,OAAO,UAAU,OAAO,CAAC;oBAC/B,QAAQ;oBACR,WAAW,OAAO,UAAU,OAAO,CAAC;gBACtC;YACF,GAAG,MAAM,CAAC;YAEV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB;gBACA;gBACA,MAAM;oBACJ,MAAM;oBACN,QAAQ;oBACR,YAAY;wBACV;wBACA;wBACA;wBACA;oBACF;gBACF;YACF;QACF;QAEA,0BAA0B;QAC1B,MAAM,YAAY,CAAA,GAAA,0IAAA,CAAA,sBAAmB,AAAD,EAAE;QACtC,MAAM,cAAc;YAClB,gBAAgB,UAAU,MAAM,CAAC,CAAC,KAAK,IAAM,MAAM,EAAE,SAAS,EAAE;YAChE,aAAa,UAAU,MAAM,CAAC,CAAC,KAAK,IAAM,MAAM,EAAE,MAAM,EAAE;YAC1D,SAAS,UAAU,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,GAAG,GAAG,MAAM;YACnD,QAAQ,UAAU,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,GAAG,GAAG,MAAM;YAClD,WAAW,UAAU,MAAM,CAAC,CAAA,IAAK,EAAE,MAAM,KAAK,GAAG,MAAM;QACzD;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB;YACA,OAAO;YACP,WAAW,KAAK,GAAG;QACrB;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA8B,GACvC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG;QAE5C,2BAA2B;QAC3B,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;QAEjD,IAAI,WAAW,SAAS,WAAW,QAAQ;YACzC,MAAM,iBAAiB,QAAQ,CAAC,IAAI,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI,KAAK,GAAG,iBAAiB;YAErF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,aAAa;oBACX,IAAI,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,GAAG;oBACzC;oBACA;oBACA;oBACA,gBAAgB;oBAChB,eAAe,OAAO,eAAe,OAAO,CAAC;oBAC7C,WAAW,KAAK,GAAG;oBACnB,QAAQ;gBACV;YACF;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiB,GAC1B;YAAE,QAAQ;QAAI;IAGlB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4B,GACrC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}