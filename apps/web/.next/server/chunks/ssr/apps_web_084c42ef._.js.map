{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/intel/web3ssh/DeStock-1/apps/web/lib/hooks/useDeStock.ts"],"sourcesContent":["import { useAccount, useReadContract, useWriteContract, useWaitForTransactionReceipt } from 'wagmi';\r\nimport { DESTOCK_ABI, getContractAddress } from '../contracts';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { Address, parseEther } from 'viem';\r\n\r\nexport function useDeStock() {\r\n  const { address, chainId } = useAccount();\r\n  \r\n  const contractAddress = useMemo(() => {\r\n    if (!chainId) return undefined;\r\n    return getContractAddress('DESTOCK', chainId);\r\n  }, [chainId]);\r\n\r\n  const { writeContract, data: hash, error, isPending } = useWriteContract();\r\n  const { isLoading: isConfirming, isSuccess: isConfirmed } = useWaitForTransactionReceipt({\r\n    hash,\r\n  });\r\n\r\n  // Read functions\r\n  const { data: nextCompanyId } = useReadContract({\r\n    address: contractAddress,\r\n    abi: DESTOCK_ABI,\r\n    functionName: 'nextCompanyId',\r\n  });\r\n\r\n  // Note: These functions return hook configurations, not hook calls\r\n  // They should be used in components that call the actual hooks\r\n  const getCompany = useCallback((companyId: number) => {\r\n    return {\r\n      address: contractAddress,\r\n      abi: DESTOCK_ABI,\r\n      functionName: 'companies' as const,\r\n      args: [BigInt(companyId)],\r\n    };\r\n  }, [contractAddress]);\r\n\r\n  const getSharePrice = useCallback((companyId: number) => {\r\n    return {\r\n      address: contractAddress,\r\n      abi: DESTOCK_ABI,\r\n      functionName: 'getSharePrice' as const,\r\n      args: [BigInt(companyId)],\r\n    };\r\n  }, [contractAddress]);\r\n\r\n  const getShareBalance = useCallback((companyId: number, userAddress?: Address) => {\r\n    const targetAddress = userAddress || address;\r\n    return {\r\n      address: contractAddress,\r\n      abi: DESTOCK_ABI,\r\n      functionName: 'balanceOf' as const,\r\n      args: targetAddress ? [targetAddress, BigInt(companyId)] : undefined,\r\n      query: {\r\n        enabled: !!targetAddress,\r\n      },\r\n    };\r\n  }, [contractAddress, address]);\r\n\r\n  const getLPTokenBalance = useCallback((companyId: number, userAddress?: Address) => {\r\n    const targetAddress = userAddress || address;\r\n    return {\r\n      address: contractAddress,\r\n      abi: DESTOCK_ABI,\r\n      functionName: 'getLPTokenBalance' as const,\r\n      args: targetAddress ? [targetAddress, BigInt(companyId)] : undefined,\r\n      query: {\r\n        enabled: !!targetAddress,\r\n      },\r\n    };\r\n  }, [contractAddress, address]);\r\n\r\n  const getUserOrders = useCallback((userAddress?: Address) => {\r\n    const targetAddress = userAddress || address;\r\n    return {\r\n      address: contractAddress,\r\n      abi: DESTOCK_ABI,\r\n      functionName: 'getUserOrders' as const,\r\n      args: targetAddress ? [targetAddress] : undefined,\r\n      query: {\r\n        enabled: !!targetAddress,\r\n      },\r\n    };\r\n  }, [contractAddress, address]);\r\n\r\n  const getOrderDetails = useCallback((orderId: number) => {\r\n    return {\r\n      address: contractAddress,\r\n      abi: DESTOCK_ABI,\r\n      functionName: 'getOrderDetails' as const,\r\n      args: [BigInt(orderId)],\r\n    };\r\n  }, [contractAddress]);\r\n\r\n  const getBuyPrice = useCallback((companyId: number, amount: string) => {\r\n    return {\r\n      address: contractAddress,\r\n      abi: DESTOCK_ABI,\r\n      functionName: 'getBuyPrice' as const,\r\n      args: [BigInt(companyId), BigInt(amount)],\r\n    };\r\n  }, [contractAddress]);\r\n\r\n  const getSellPrice = useCallback((companyId: number, amount: string) => {\r\n    return {\r\n      address: contractAddress,\r\n      abi: DESTOCK_ABI,\r\n      functionName: 'getSellPrice' as const,\r\n      args: [BigInt(companyId), BigInt(amount)],\r\n    };\r\n  }, [contractAddress]);\r\n\r\n  const getTradingVolume = useCallback((companyId: number) => {\r\n    return {\r\n      address: contractAddress,\r\n      abi: DESTOCK_ABI,\r\n      functionName: 'getTradingVolume' as const,\r\n      args: [BigInt(companyId)],\r\n    };\r\n  }, [contractAddress]);\r\n\r\n  // Write functions\r\n  const registerCompany = useCallback(\r\n    (name: string, totalSupply: string, initialPrice: string) => {\r\n      if (!contractAddress) return;\r\n      \r\n      // Calculate initial liquidity as totalSupply * initialPrice\r\n      const totalSupplyBigInt = BigInt(totalSupply);\r\n      const initialPriceBigInt = parseEther(initialPrice);\r\n      const initialLiquidity = totalSupplyBigInt * initialPriceBigInt;\r\n      \r\n      writeContract({\r\n        address: contractAddress,\r\n        abi: DESTOCK_ABI,\r\n        functionName: 'registerCompany',\r\n        args: [name, totalSupplyBigInt, initialLiquidity],\r\n      });\r\n    },\r\n    [contractAddress, writeContract]\r\n  );\r\n\r\n  const buyShares = useCallback(\r\n    (companyId: number, amount: string) => {\r\n      if (!contractAddress) return;\r\n      \r\n      writeContract({\r\n        address: contractAddress,\r\n        abi: DESTOCK_ABI,\r\n        functionName: 'buyShares',\r\n        args: [BigInt(companyId), BigInt(amount)],\r\n      });\r\n    },\r\n    [contractAddress, writeContract]\r\n  );\r\n\r\n  const sellShares = useCallback(\r\n    (companyId: number, amount: string) => {\r\n      if (!contractAddress) return;\r\n      \r\n      writeContract({\r\n        address: contractAddress,\r\n        abi: DESTOCK_ABI,\r\n        functionName: 'sellShares',\r\n        args: [BigInt(companyId), BigInt(amount)],\r\n      });\r\n    },\r\n    [contractAddress, writeContract]\r\n  );\r\n\r\n  const addLiquidity = useCallback(\r\n    (companyId: number, tokenAmount: string, shareAmount: string) => {\r\n      if (!contractAddress) return;\r\n      \r\n      writeContract({\r\n        address: contractAddress,\r\n        abi: DESTOCK_ABI,\r\n        functionName: 'addLiquidity',\r\n        args: [BigInt(companyId), parseEther(tokenAmount), BigInt(shareAmount)],\r\n      });\r\n    },\r\n    [contractAddress, writeContract]\r\n  );\r\n\r\n  const removeLiquidity = useCallback(\r\n    (companyId: number, lpTokens: string) => {\r\n      if (!contractAddress) return;\r\n      \r\n      writeContract({\r\n        address: contractAddress,\r\n        abi: DESTOCK_ABI,\r\n        functionName: 'removeLiquidity',\r\n        args: [BigInt(companyId), BigInt(lpTokens)],\r\n      });\r\n    },\r\n    [contractAddress, writeContract]\r\n  );\r\n\r\n  const placeOrder = useCallback(\r\n    (companyId: number, isBuy: boolean, amount: string, price: string) => {\r\n      if (!contractAddress) return;\r\n      \r\n      writeContract({\r\n        address: contractAddress,\r\n        abi: DESTOCK_ABI,\r\n        functionName: 'placeOrder',\r\n        args: [BigInt(companyId), isBuy, BigInt(amount), parseEther(price)],\r\n      });\r\n    },\r\n    [contractAddress, writeContract]\r\n  );\r\n\r\n  const cancelOrder = useCallback(\r\n    (orderId: number) => {\r\n      if (!contractAddress) return;\r\n      \r\n      writeContract({\r\n        address: contractAddress,\r\n        abi: DESTOCK_ABI,\r\n        functionName: 'cancelOrder',\r\n        args: [BigInt(orderId)],\r\n      });\r\n    },\r\n    [contractAddress, writeContract]\r\n  );\r\n\r\n  return {\r\n    // Contract data\r\n    contractAddress,\r\n    nextCompanyId: nextCompanyId ? Number(nextCompanyId) : 0,\r\n    \r\n    // Read functions\r\n    getCompany,\r\n    getSharePrice,\r\n    getShareBalance,\r\n    getLPTokenBalance,\r\n    getUserOrders,\r\n    getOrderDetails,\r\n    getBuyPrice,\r\n    getSellPrice,\r\n    getTradingVolume,\r\n    \r\n    // Write functions\r\n    registerCompany,\r\n    buyShares,\r\n    sellShares,\r\n    addLiquidity,\r\n    removeLiquidity,\r\n    placeOrder,\r\n    cancelOrder,\r\n    \r\n    // Transaction state\r\n    hash,\r\n    isPending,\r\n    isConfirming,\r\n    isConfirmed,\r\n    error,\r\n  };\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 319, "column": 0}, "map": {"version":3,"sources":["file:///D:/intel/web3ssh/DeStock-1/apps/web/components/CompanyRegistry.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { z } from 'zod';\r\nimport { useDeStock } from '@/lib/hooks/useDeStock';\r\nimport { useDSTK } from '@/lib/hooks/useDSTK';\r\nimport { useAccount } from 'wagmi';\r\n\r\nconst schema = z.object({\r\n  name: z.string().min(1, 'Company name is required').max(50, 'Name too long'),\r\n  initialPrice: z.string().min(1, 'Initial price is required'),\r\n  totalSupply: z.string().min(1, 'Total supply is required'),\r\n});\r\n\r\ntype FormData = z.infer<typeof schema>;\r\n\r\nexport function CompanyRegistry() {\r\n  const { isConnected, address } = useAccount();\r\n  const { registerCompany, isPending, isConfirming, isConfirmed, error, contractAddress } = useDeStock();\r\n  const { balance, approve } = useDSTK();\r\n  const [needsApproval, setNeedsApproval] = useState(true);\r\n  const [isApproving, setIsApproving] = useState(false);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n    watch,\r\n  } = useForm<FormData>({\r\n    resolver: zodResolver(schema),\r\n  });\r\n\r\n  const watchedValues = watch();\r\n  const estimatedCost = watchedValues.initialPrice && watchedValues.totalSupply \r\n    ? (parseFloat(watchedValues.initialPrice) * parseFloat(watchedValues.totalSupply) + 100).toString()\r\n    : '100';\r\n\r\n  // Get current allowance for DeStock contract\r\n  // TODO: Fix allowance checking after hook refactor\r\n  const currentAllowance = 0;\r\n\r\n  const checkApproval = async () => {\r\n    if (!isConnected || !address || !contractAddress) return;\r\n    \r\n    // Check if user has enough balance\r\n    const userBalance = parseFloat(balance);\r\n    const requiredBalance = parseFloat(estimatedCost);\r\n    \r\n    if (userBalance < requiredBalance) {\r\n      setNeedsApproval(true);\r\n      return;\r\n    }\r\n\r\n    // Check allowance against estimated cost\r\n    const sufficient = currentAllowance >= parseFloat(estimatedCost);\r\n    setNeedsApproval(!sufficient);\r\n  };\r\n\r\n  // Check approval whenever values change\r\n  useEffect(() => {\r\n    checkApproval();\r\n  }, [estimatedCost, currentAllowance, isConnected, address, contractAddress]);\r\n\r\n  const handleApprove = async () => {\r\n    if (!address || !contractAddress) return;\r\n    \r\n    setIsApproving(true);\r\n    try {\r\n      // Approve a bit more than estimated to account for gas and rounding\r\n      const approvalAmount = (parseFloat(estimatedCost) * 1.1).toString();\r\n      await approve(contractAddress, approvalAmount);\r\n      // Note: approval hash would be available from the approve function return value\r\n      // Wait a moment for approval to be confirmed\r\n      setTimeout(() => {\r\n        checkApproval();\r\n      }, 2000);\r\n    } catch (error) {\r\n      console.error('Approval failed:', error);\r\n      alert('Approval failed. Please try again or check your wallet.');\r\n    } finally {\r\n      setIsApproving(false);\r\n    }\r\n  };\r\n\r\n  const onSubmit = async (data: FormData) => {\r\n    if (!isConnected) {\r\n      alert('Please connect your wallet first');\r\n      return;\r\n    }\r\n\r\n    const userBalance = parseFloat(balance);\r\n    const requiredBalance = parseFloat(estimatedCost);\r\n    \r\n    if (userBalance < requiredBalance) {\r\n      alert(`Insufficient DSTK balance. You need at least ${requiredBalance} DSTK to register this company.`);\r\n      return;\r\n    }\r\n\r\n    if (needsApproval) {\r\n      alert('Please approve DSTK spending first by clicking the \"Approve\" button above.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log('Registering company with params:', {\r\n        name: data.name,\r\n        totalSupply: data.totalSupply,\r\n        initialPrice: data.initialPrice,\r\n        estimatedCost: estimatedCost\r\n      });\r\n\r\n      // Pass parameters in correct order: name, totalSupply, initialPrice\r\n      await registerCompany(data.name, data.totalSupply, data.initialPrice);\r\n    } catch (error: any) {\r\n      console.error('Registration failed:', error);\r\n      \r\n      // Provide more specific error messages\r\n      let errorMessage = 'Registration failed. ';\r\n      \r\n      if (error?.message?.includes('insufficient allowance')) {\r\n        errorMessage += 'Please approve DSTK spending first.';\r\n        setNeedsApproval(true);\r\n      } else if (error?.message?.includes('user rejected')) {\r\n        errorMessage += 'Transaction was rejected. Please try again and confirm the transaction in your wallet.';\r\n      } else if (error?.message?.includes('gas')) {\r\n        errorMessage += 'Transaction failed due to gas issues. Please try again with higher gas limit.';\r\n      } else if (error?.message?.includes('insufficient funds')) {\r\n        errorMessage += 'Insufficient funds for gas. Please ensure you have enough ETH for transaction fees.';\r\n      } else {\r\n        errorMessage += error?.message || 'Unknown error occurred.';\r\n      }\r\n      \r\n      alert(errorMessage);\r\n    }\r\n  };\r\n\r\n  // Reset form when registration is confirmed\r\n  useEffect(() => {\r\n    if (isConfirmed) {\r\n      reset();\r\n      setNeedsApproval(true);\r\n    }\r\n  }, [isConfirmed, reset]);\r\n\r\n  if (!isConnected) {\r\n    return (\r\n      <div className=\"destock-card text-center py-8\">\r\n        <h3 className=\"text-lg font-medium text-high-contrast mb-2\">\r\n          Connect Your Wallet\r\n        </h3>\r\n        <p className=\"text-medium-contrast\">\r\n          Please connect your wallet to register a company.\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"destock-card\">\r\n      <div className=\"p-6\">\r\n        <h3 className=\"text-lg font-medium text-high-contrast mb-6\">\r\n          Register Your Company\r\n        </h3>\r\n        \r\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\r\n          <div>\r\n            <label className=\"destock-label\" htmlFor=\"name\">\r\n              Company Name\r\n            </label>\r\n            <input\r\n              {...register('name')}\r\n              type=\"text\"\r\n              id=\"name\"\r\n              className=\"destock-input\"\r\n              placeholder=\"Enter company name\"\r\n            />\r\n            {errors.name && (\r\n              <p className=\"mt-1 text-sm danger\">{errors.name.message}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"destock-label\" htmlFor=\"initialPrice\">\r\n              Initial Share Price (DSTK)\r\n            </label>\r\n            <input\r\n              {...register('initialPrice')}\r\n              type=\"number\"\r\n              step=\"0.01\"\r\n              min=\"0.01\"\r\n              id=\"initialPrice\"\r\n              className=\"destock-input\"\r\n              placeholder=\"10.00\"\r\n            />\r\n            {errors.initialPrice && (\r\n              <p className=\"mt-1 text-sm danger\">{errors.initialPrice.message}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"destock-label\" htmlFor=\"totalSupply\">\r\n              Total Share Supply\r\n            </label>\r\n            <input\r\n              {...register('totalSupply')}\r\n              type=\"number\"\r\n              min=\"1\"\r\n              id=\"totalSupply\"\r\n              className=\"destock-input\"\r\n              placeholder=\"1000\"\r\n            />\r\n            {errors.totalSupply && (\r\n              <p className=\"mt-1 text-sm danger\">{errors.totalSupply.message}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"bg-high-visibility p-4 rounded-lg border border-gray-200 dark:border-gray-700\">\r\n            <h4 className=\"text-sm font-medium text-high-contrast mb-2\">Cost Breakdown</h4>\r\n            <div className=\"space-y-1 text-sm text-medium-contrast\">\r\n              <div className=\"flex justify-between\">\r\n                <span>Registration Fee:</span>\r\n                <span>100 DSTK</span>\r\n              </div>\r\n              {watchedValues.initialPrice && watchedValues.totalSupply && (\r\n                <div className=\"flex justify-between\">\r\n                  <span>Initial Liquidity:</span>\r\n                  <span>\r\n                    {(parseFloat(watchedValues.initialPrice) * parseFloat(watchedValues.totalSupply)).toFixed(2)} DSTK\r\n                  </span>\r\n                </div>\r\n              )}\r\n              <div className=\"flex justify-between font-medium border-t border-gray-300 dark:border-gray-600 pt-1 text-high-contrast\">\r\n                <span>Total Cost:</span>\r\n                <span>{estimatedCost} DSTK</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"mt-2 space-y-1 text-xs text-low-contrast\">\r\n              <div>Your Balance: {balance} DSTK</div>\r\n              <div>Current Allowance: {currentAllowance.toFixed(2)} DSTK</div>\r\n            </div>\r\n          </div>\r\n\r\n          {needsApproval && (\r\n            <div className=\"bg-yellow-50 dark:bg-yellow-900/20 p-4 rounded-lg border border-yellow-200 dark:border-yellow-800\">\r\n              <h4 className=\"text-sm font-medium text-yellow-800 dark:text-yellow-200 mb-2\">\r\n                Approval Required\r\n              </h4>\r\n              <p className=\"text-xs text-yellow-700 dark:text-yellow-300 mb-3\">\r\n                You need to approve DSTK spending for the DeStock contract before registering a company.\r\n              </p>\r\n              <button\r\n                type=\"button\"\r\n                onClick={handleApprove}\r\n                disabled={isApproving || parseFloat(balance) < parseFloat(estimatedCost)}\r\n                className=\"w-full bg-yellow-600 hover:bg-yellow-700 text-white font-medium py-2 px-4 rounded disabled:opacity-50 disabled:cursor-not-allowed\"\r\n              >\r\n                {isApproving ? 'Approving...' : `Approve ${estimatedCost} DSTK`}\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          {error && (\r\n            <div className=\"bg-red-50 dark:bg-red-900/20 p-4 rounded-lg border border-red-200 dark:border-red-800\">\r\n              <h4 className=\"text-sm font-medium text-red-800 dark:text-red-200 mb-2\">\r\n                Registration Failed\r\n              </h4>\r\n              <p className=\"text-sm danger mb-2\">\r\n                {error.message}\r\n              </p>\r\n              <div className=\"text-xs text-red-600 dark:text-red-400\">\r\n                <p><strong>Common solutions:</strong></p>\r\n                <ul className=\"list-disc list-inside mt-1 space-y-1\">\r\n                  <li>Ensure you have approved sufficient DSTK tokens</li>\r\n                  <li>Check that you have enough ETH for gas fees</li>\r\n                  <li>Try increasing gas limit in your wallet</li>\r\n                  <li>Make sure the company name is unique</li>\r\n                  <li>Refresh and try again if the approval was recent</li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <button\r\n            type=\"submit\"\r\n            disabled={isPending || isConfirming || parseFloat(balance) < parseFloat(estimatedCost) || needsApproval}\r\n            className=\"w-full destock-button-primary disabled:opacity-50 disabled:cursor-not-allowed\"\r\n          >\r\n            {isPending || isConfirming\r\n              ? 'Processing...'\r\n              : parseFloat(balance) < parseFloat(estimatedCost)\r\n              ? 'Insufficient Balance'\r\n              : needsApproval\r\n              ? 'Approval Required'\r\n              : 'Register Company'}\r\n          </button>\r\n\r\n          {isConfirmed && (\r\n            <div className=\"bg-green-50 dark:bg-green-900/20 p-4 rounded-lg border border-green-200 dark:border-green-800\">\r\n              <p className=\"text-sm success\">\r\n                Company registered successfully! 🎉\r\n              </p>\r\n            </div>\r\n          )}\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}