{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///D:/intel/web3ssh/DeStock-1/apps/web/lib/utils/chartData.ts"],"sourcesContent":["// Utility functions for generating and managing chart data\r\n\r\nexport interface OHLCData {\r\n  time: number;\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  volume?: number;\r\n}\r\n\r\nexport interface IndicatorData {\r\n  time: number;\r\n  value: number;\r\n}\r\n\r\nexport interface ChartData {\r\n  ohlc: OHLCData[];\r\n  volume: { time: number; value: number; color?: string }[];\r\n  sma?: IndicatorData[];\r\n  ema?: IndicatorData[];\r\n  rsi?: IndicatorData[];\r\n  macd?: {\r\n    time: number;\r\n    macd: number;\r\n    signal: number;\r\n    histogram: number;\r\n  }[];\r\n}\r\n\r\n// Generate realistic OHLC data\r\nexport function generateOHLCData(\r\n  days: number = 30,\r\n  startPrice: number = 100,\r\n  volatility: number = 0.02\r\n): OHLCData[] {\r\n  const data: OHLCData[] = [];\r\n  let currentPrice = startPrice;\r\n  const now = Date.now();\r\n  const dayMs = 24 * 60 * 60 * 1000;\r\n\r\n  for (let i = days; i >= 0; i--) {\r\n    const time = now - (i * dayMs);\r\n    \r\n    // Generate random price movements\r\n    const change = (Math.random() - 0.5) * volatility * currentPrice;\r\n    const open = currentPrice;\r\n    const close = open + change;\r\n    \r\n    // Generate high and low based on open and close\r\n    const maxPrice = Math.max(open, close);\r\n    const minPrice = Math.min(open, close);\r\n    const high = maxPrice + Math.random() * 0.01 * currentPrice;\r\n    const low = minPrice - Math.random() * 0.01 * currentPrice;\r\n    \r\n    // Generate volume (higher volume on bigger price changes)\r\n    const volume = Math.floor(\r\n      (10000 + Math.random() * 50000) * (1 + Math.abs(change) / currentPrice * 5)\r\n    );\r\n\r\n    data.push({\r\n      time: Math.floor(time / 1000), // Lightweight Charts expects seconds\r\n      open: Number(open.toFixed(2)),\r\n      high: Number(high.toFixed(2)),\r\n      low: Number(low.toFixed(2)),\r\n      close: Number(close.toFixed(2)),\r\n      volume,\r\n    });\r\n\r\n    currentPrice = close;\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n// Calculate Simple Moving Average\r\nexport function calculateSMA(data: OHLCData[], period: number = 20): IndicatorData[] {\r\n  const sma: IndicatorData[] = [];\r\n  \r\n  for (let i = period - 1; i < data.length; i++) {\r\n    let sum = 0;\r\n    for (let j = i - period + 1; j <= i; j++) {\r\n      sum += data[j].close;\r\n    }\r\n    \r\n    sma.push({\r\n      time: data[i].time,\r\n      value: Number((sum / period).toFixed(2)),\r\n    });\r\n  }\r\n  \r\n  return sma;\r\n}\r\n\r\n// Calculate Exponential Moving Average\r\nexport function calculateEMA(data: OHLCData[], period: number = 20): IndicatorData[] {\r\n  const ema: IndicatorData[] = [];\r\n  const multiplier = 2 / (period + 1);\r\n  \r\n  // Start with SMA for the first value\r\n  let sum = 0;\r\n  for (let i = 0; i < period; i++) {\r\n    sum += data[i].close;\r\n  }\r\n  \r\n  ema.push({\r\n    time: data[period - 1].time,\r\n    value: Number((sum / period).toFixed(2)),\r\n  });\r\n  \r\n  // Calculate EMA for the rest\r\n  for (let i = period; i < data.length; i++) {\r\n    const value = (data[i].close - ema[ema.length - 1].value) * multiplier + ema[ema.length - 1].value;\r\n    ema.push({\r\n      time: data[i].time,\r\n      value: Number(value.toFixed(2)),\r\n    });\r\n  }\r\n  \r\n  return ema;\r\n}\r\n\r\n// Calculate RSI (Relative Strength Index)\r\nexport function calculateRSI(data: OHLCData[], period: number = 14): IndicatorData[] {\r\n  const rsi: IndicatorData[] = [];\r\n  const gains: number[] = [];\r\n  const losses: number[] = [];\r\n  \r\n  // Calculate gains and losses\r\n  for (let i = 1; i < data.length; i++) {\r\n    const change = data[i].close - data[i - 1].close;\r\n    gains.push(change > 0 ? change : 0);\r\n    losses.push(change < 0 ? -change : 0);\r\n  }\r\n  \r\n  // Calculate initial average gain and loss\r\n  let avgGain = gains.slice(0, period).reduce((a, b) => a + b, 0) / period;\r\n  let avgLoss = losses.slice(0, period).reduce((a, b) => a + b, 0) / period;\r\n  \r\n  // Calculate RSI\r\n  for (let i = period; i < data.length; i++) {\r\n    const rs = avgGain / avgLoss;\r\n    const rsiValue = 100 - (100 / (1 + rs));\r\n    \r\n    rsi.push({\r\n      time: data[i].time,\r\n      value: Number(rsiValue.toFixed(2)),\r\n    });\r\n    \r\n    // Update average gain and loss for next iteration\r\n    if (i < data.length - 1) {\r\n      const change = data[i + 1].close - data[i].close;\r\n      const gain = change > 0 ? change : 0;\r\n      const loss = change < 0 ? -change : 0;\r\n      \r\n      avgGain = (avgGain * (period - 1) + gain) / period;\r\n      avgLoss = (avgLoss * (period - 1) + loss) / period;\r\n    }\r\n  }\r\n  \r\n  return rsi;\r\n}\r\n\r\n// Generate volume data with colors\r\nexport function generateVolumeData(ohlcData: OHLCData[]): { time: number; value: number; color?: string }[] {\r\n  return ohlcData.map((candle, index) => {\r\n    const prevCandle = index > 0 ? ohlcData[index - 1] : candle;\r\n    const isUp = candle.close > prevCandle.close;\r\n    \r\n    return {\r\n      time: candle.time,\r\n      value: candle.volume || 0,\r\n      color: isUp ? '#00D4AA' : '#F6465D', // Success green for up, danger red for down\r\n    };\r\n  });\r\n}\r\n\r\n// Generate mock company data\r\nexport function generateCompanyData(count: number = 20) {\r\n  const companies = [\r\n    'Apple Inc.', 'Microsoft Corp.', 'Amazon.com Inc.', 'Alphabet Inc.',\r\n    'Tesla Inc.', 'Meta Platforms', 'NVIDIA Corp.', 'Netflix Inc.',\r\n    'PayPal Holdings', 'Adobe Inc.', 'Salesforce Inc.', 'Zoom Video',\r\n    'Spotify Technology', 'Uber Technologies', 'Airbnb Inc.', 'Twitter Inc.',\r\n    'Snap Inc.', 'Pinterest Inc.', 'Shopify Inc.', 'Square Inc.',\r\n  ];\r\n  \r\n  const sectors = [\r\n    'Technology', 'Consumer Discretionary', 'Communication Services',\r\n    'Healthcare', 'Financials', 'Industrials', 'Consumer Staples',\r\n  ];\r\n  \r\n  return Array.from({ length: Math.min(count, companies.length) }, (_, index) => {\r\n    const basePrice = 50 + Math.random() * 200;\r\n    const change = (Math.random() - 0.5) * 0.1 * basePrice;\r\n    const changePercent = (change / basePrice) * 100;\r\n    \r\n    return {\r\n      id: index,\r\n      name: companies[index],\r\n      symbol: companies[index].split(' ')[0].slice(0, 4).toUpperCase(),\r\n      sector: sectors[Math.floor(Math.random() * sectors.length)],\r\n      price: Number(basePrice.toFixed(2)),\r\n      change: Number(change.toFixed(2)),\r\n      changePercent: Number(changePercent.toFixed(2)),\r\n      volume: Math.floor(Math.random() * 1000000) + 100000,\r\n      marketCap: Math.floor((basePrice * (Math.random() * 1000000 + 100000)) / 1000) * 1000,\r\n      chartData: generateOHLCData(30, basePrice, 0.02),\r\n    };\r\n  });\r\n}\r\n\r\n// Generate portfolio data\r\nexport function generatePortfolioData() {\r\n  const holdings = generateCompanyData(8).map((company) => {\r\n    const shares = Math.floor(Math.random() * 100) + 10;\r\n    const avgCost = company.price * (0.8 + Math.random() * 0.4); // Â±20% from current price\r\n    const totalValue = shares * company.price;\r\n    const totalCost = shares * avgCost;\r\n    const pnl = totalValue - totalCost;\r\n    const pnlPercent = (pnl / totalCost) * 100;\r\n    \r\n    return {\r\n      ...company,\r\n      shares,\r\n      avgCost: Number(avgCost.toFixed(2)),\r\n      totalValue: Number(totalValue.toFixed(2)),\r\n      totalCost: Number(totalCost.toFixed(2)),\r\n      pnl: Number(pnl.toFixed(2)),\r\n      pnlPercent: Number(pnlPercent.toFixed(2)),\r\n    };\r\n  });\r\n  \r\n  const totalValue = holdings.reduce((sum, holding) => sum + holding.totalValue, 0);\r\n  const totalCost = holdings.reduce((sum, holding) => sum + holding.totalCost, 0);\r\n  const totalPnL = totalValue - totalCost;\r\n  const totalPnLPercent = (totalPnL / totalCost) * 100;\r\n  \r\n  return {\r\n    holdings,\r\n    summary: {\r\n      totalValue: Number(totalValue.toFixed(2)),\r\n      totalCost: Number(totalCost.toFixed(2)),\r\n      totalPnL: Number(totalPnL.toFixed(2)),\r\n      totalPnLPercent: Number(totalPnLPercent.toFixed(2)),\r\n      dayChange: Number((totalValue * (Math.random() - 0.5) * 0.02).toFixed(2)),\r\n      dayChangePercent: Number(((Math.random() - 0.5) * 2).toFixed(2)),\r\n    },\r\n  };\r\n}\r\n\r\n// Real-time data simulation\r\nexport function createRealTimeDataStream(\r\n  initialData: OHLCData[],\r\n  callback: (newData: OHLCData) => void,\r\n  interval: number = 5000\r\n) {\r\n  const lastCandle = initialData[initialData.length - 1];\r\n  let currentPrice = lastCandle.close;\r\n  \r\n  const generateNextCandle = () => {\r\n    const now = Math.floor(Date.now() / 1000);\r\n    const change = (Math.random() - 0.5) * 0.02 * currentPrice;\r\n    const open = currentPrice;\r\n    const close = open + change;\r\n    const high = Math.max(open, close) + Math.random() * 0.005 * currentPrice;\r\n    const low = Math.min(open, close) - Math.random() * 0.005 * currentPrice;\r\n    const volume = Math.floor(Math.random() * 50000) + 10000;\r\n    \r\n    const newCandle: OHLCData = {\r\n      time: now,\r\n      open: Number(open.toFixed(2)),\r\n      high: Number(high.toFixed(2)),\r\n      low: Number(low.toFixed(2)),\r\n      close: Number(close.toFixed(2)),\r\n      volume,\r\n    };\r\n    \r\n    currentPrice = close;\r\n    callback(newCandle);\r\n  };\r\n  \r\n  const intervalId = setInterval(generateNextCandle, interval);\r\n  \r\n  return () => clearInterval(intervalId);\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 307, "column": 0}, "map": {"version":3,"sources":["file:///D:/intel/web3ssh/DeStock-1/apps/web/lib/utils/companyUtils.ts"],"sourcesContent":["import companiesData from '../constants/companies.json';\r\nimport logosData from '../constants/logos.json';\r\nimport { Company, LogoMapping, CompanyList, FilterOptions } from '../types/company';\r\n\r\n// Get all companies as an array\r\nexport const getAllCompanies = (): CompanyList => {\r\n  const companies = companiesData.companies as { [key: string]: Company };\r\n  return Object.values(companies);\r\n};\r\n\r\n// Get all company IDs as an array (for consistent ordering)\r\nexport const getAllCompanyIds = (): string[] => {\r\n  const companies = companiesData.companies as { [key: string]: Company };\r\n  return Object.keys(companies);\r\n};\r\n\r\n// Convert string company ID to numeric ID for blockchain operations\r\nexport const getNumericCompanyId = (stringId: string): number => {\r\n  const companyIds = getAllCompanyIds();\r\n  const index = companyIds.indexOf(stringId);\r\n  return index === -1 ? -1 : index;\r\n};\r\n\r\n// Convert numeric company ID back to string ID\r\nexport const getStringCompanyId = (numericId: number): string | undefined => {\r\n  const companyIds = getAllCompanyIds();\r\n  return companyIds[numericId];\r\n};\r\n\r\n// Get company by numeric ID (for blockchain operations)\r\nexport const getCompanyByNumericId = (numericId: number): Company | undefined => {\r\n  const stringId = getStringCompanyId(numericId);\r\n  return stringId ? getCompanyById(stringId) : undefined;\r\n};\r\n\r\n// Get company by ID\r\nexport const getCompanyById = (id: string): Company | undefined => {\r\n  const companies = companiesData.companies as { [key: string]: Company };\r\n  return companies[id];\r\n};\r\n\r\n// Get company logo URL\r\nexport const getCompanyLogo = (companyId: string): string | undefined => {\r\n  const logos = logosData as LogoMapping;\r\n  return logos[companyId];\r\n};\r\n\r\n// Get companies by sector\r\nexport const getCompaniesBySector = (sector: string): CompanyList => {\r\n  return getAllCompanies().filter(company => company.sector === sector);\r\n};\r\n\r\n// Get companies by category  \r\nexport const getCompaniesByCategory = (category: string): CompanyList => {\r\n  return getAllCompanies().filter(company => company.category === category);\r\n};\r\n\r\n// Search companies\r\nexport const searchCompanies = (searchTerm: string): CompanyList => {\r\n  const term = searchTerm.toLowerCase();\r\n  return getAllCompanies().filter(company => \r\n    company.name.toLowerCase().includes(term) ||\r\n    company.symbol.toLowerCase().includes(term) ||\r\n    company.tokenName.toLowerCase().includes(term) ||\r\n    company.description.toLowerCase().includes(term) ||\r\n    company.category.toLowerCase().includes(term) ||\r\n    company.sector.toLowerCase().includes(term)\r\n  );\r\n};\r\n\r\n// Filter and sort companies\r\nexport const filterAndSortCompanies = (options: FilterOptions): CompanyList => {\r\n  let companies = getAllCompanies();\r\n\r\n  // Apply search filter\r\n  if (options.searchTerm) {\r\n    companies = searchCompanies(options.searchTerm);\r\n  }\r\n\r\n  // Apply sector filter\r\n  if (options.selectedSector) {\r\n    companies = companies.filter(company => company.sector === options.selectedSector);\r\n  }\r\n\r\n  // Apply category filter\r\n  if (options.selectedCategory) {\r\n    companies = companies.filter(company => company.category === options.selectedCategory);\r\n  }\r\n\r\n  // Apply sorting\r\n  if (options.sortField && options.sortDirection) {\r\n    companies.sort((a, b) => {\r\n      let aValue: any, bValue: any;\r\n      \r\n      switch (options.sortField) {\r\n        case 'name':\r\n          aValue = a.name;\r\n          bValue = b.name;\r\n          break;\r\n        case 'price':\r\n          // Extract numeric value from price string (e.g., \"$1.00\" -> 1.00)\r\n          aValue = parseFloat(a.price.replace('$', ''));\r\n          bValue = parseFloat(b.price.replace('$', ''));\r\n          break;\r\n        case 'marketCap':\r\n          // Extract numeric value from market cap string (e.g., \"$1B\" -> 1000000000)\r\n          aValue = parseMarketCap(a.marketCap);\r\n          bValue = parseMarketCap(b.marketCap);\r\n          break;\r\n        default:\r\n          return 0;\r\n      }\r\n\r\n      if (typeof aValue === 'string') {\r\n        return options.sortDirection === 'asc' \r\n          ? aValue.localeCompare(bValue) \r\n          : bValue.localeCompare(aValue);\r\n      }\r\n      \r\n      return options.sortDirection === 'asc' ? aValue - bValue : bValue - aValue;\r\n    });\r\n  }\r\n\r\n  return companies;\r\n};\r\n\r\n// Parse market cap string to number for sorting\r\nconst parseMarketCap = (marketCap: string): number => {\r\n  const value = parseFloat(marketCap.replace(/[$,]/g, ''));\r\n  if (marketCap.includes('B')) {\r\n    return value * 1e9;\r\n  } else if (marketCap.includes('M')) {\r\n    return value * 1e6;\r\n  } else if (marketCap.includes('K')) {\r\n    return value * 1e3;\r\n  }\r\n  return value;\r\n};\r\n\r\n// Get all available sectors\r\nexport const getAllSectors = (): string[] => {\r\n  return companiesData.sectors;\r\n};\r\n\r\n// Get all available categories\r\nexport const getAllCategories = (): string[] => {\r\n  return companiesData.categories;\r\n};\r\n\r\n// Get random companies for featured section\r\nexport const getRandomCompanies = (count: number): CompanyList => {\r\n  const companies = getAllCompanies();\r\n  const shuffled = [...companies].sort(() => 0.5 - Math.random());\r\n  return shuffled.slice(0, count);\r\n};\r\n\r\n// Get trending companies (high market cap)\r\nexport const getTrendingCompanies = (): CompanyList => {\r\n  return getAllCompanies()\r\n    .filter(company => {\r\n      const marketCapValue = parseFloat(company.marketCap.replace(/[$BM]/g, ''));\r\n      const marketCapInNumber = company.marketCap.includes('B') ? marketCapValue * 1000 : marketCapValue;\r\n      return marketCapInNumber > 500; // Companies with market cap over 500M\r\n    })\r\n    .sort((a, b) => {\r\n      const aValue = parseFloat(a.marketCap.replace(/[$BM]/g, '')) * (a.marketCap.includes('B') ? 1000 : 1);\r\n      const bValue = parseFloat(b.marketCap.replace(/[$BM]/g, '')) * (b.marketCap.includes('B') ? 1000 : 1);\r\n      return bValue - aValue;\r\n    });\r\n};\r\n\r\n// Get top companies by market cap\r\nexport const getTopCompaniesByMarketCap = (count: number = 10): CompanyList => {\r\n  return getAllCompanies()\r\n    .sort((a, b) => parseMarketCap(b.marketCap) - parseMarketCap(a.marketCap))\r\n    .slice(0, count);\r\n};\r\n\r\n// Format market cap for display\r\nexport const formatMarketCap = (marketCapString: string): string => {\r\n  const value = parseMarketCap(marketCapString);\r\n  \r\n  if (value >= 1e9) {\r\n    return `$${(value / 1e9).toFixed(1)}B`;\r\n  } else if (value >= 1e6) {\r\n    return `$${(value / 1e6).toFixed(1)}M`;\r\n  } else if (value >= 1e3) {\r\n    return `$${(value / 1e3).toFixed(1)}K`;\r\n  }\r\n  \r\n  return `$${value.toFixed(2)}`;\r\n};\r\n\r\n// Format price for display\r\nexport const formatPrice = (priceString: string): string => {\r\n  const value = parseFloat(priceString.replace('$', ''));\r\n  return `$${value.toFixed(2)}`;\r\n};\r\n\r\n// Get company statistics\r\nexport const getCompanyStats = () => {\r\n  const companies = getAllCompanies();\r\n  const totalMarketCap = companies.reduce((sum, company) => \r\n    sum + parseMarketCap(company.marketCap), 0\r\n  );\r\n  \r\n  return {\r\n    totalCompanies: companies.length,\r\n    totalMarketCap: formatMarketCap(`$${totalMarketCap}`),\r\n    sectors: getAllSectors().length,\r\n    categories: getAllCategories().length,\r\n    averagePrice: companies.reduce((sum, company) => \r\n      sum + parseFloat(company.price.replace('$', '')), 0\r\n    ) / companies.length\r\n  };\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 486, "column": 0}, "map": {"version":3,"sources":["file:///D:/intel/web3ssh/DeStock-1/apps/web/lib/constants/shared.ts"],"sourcesContent":["/**\r\n * Shared constants for DeStock trading platform\r\n * Centralizes configuration values used across multiple components\r\n */\r\n\r\n// Chain configuration\r\nexport const ALLOWED_CHAIN_IDS = [31337, 11155111]; // Local Anvil and Sepolia testnet\r\nexport const DEFAULT_CHAIN_ID = 31337;\r\n\r\n// Contract addresses\r\nexport const DSTK_TOKEN_ADDRESS = process.env.NEXT_PUBLIC_DSTK_TOKEN_ADDRESS || '';\r\nexport const DESTOCK_CONTRACT_ADDRESS = process.env.NEXT_PUBLIC_DESTOCK_CONTRACT_ADDRESS || '';\r\n\r\n// WebSocket URLs for different environments\r\nexport const WS_URLS = {\r\n  development: 'ws://localhost:8080',\r\n  staging: process.env.NEXT_PUBLIC_WS_STAGING_URL || 'ws://localhost:8080',\r\n  production: process.env.NEXT_PUBLIC_WS_URL || ''\r\n};\r\n\r\n// API endpoints\r\nexport const API_ENDPOINTS = {\r\n  faucet: '/api/faucet',\r\n  market: '/api/market', \r\n  portfolio: '/api/portfolio',\r\n  tradeEngine: process.env.NEXT_PUBLIC_TRADE_ENGINE_URL || 'http://localhost:3002',\r\n  backend: process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:3001'\r\n};\r\n\r\n// Faucet configuration\r\nexport const FAUCET_CONFIG = {\r\n  amount: '1000', // DSTK tokens to mint\r\n  rateLimitWindow: 24 * 60 * 60 * 1000, // 24 hours in milliseconds\r\n  allowedChains: ALLOWED_CHAIN_IDS\r\n};\r\n\r\n// Rate limiting configuration\r\nexport const RATE_LIMITING = {\r\n  faucet: {\r\n    maxRequests: 5,\r\n    windowMs: 15 * 60 * 1000, // 15 minutes\r\n  },\r\n  market: {\r\n    maxRequests: 100,\r\n    windowMs: 60 * 1000, // 1 minute\r\n  },\r\n  trading: {\r\n    maxRequests: 50,\r\n    windowMs: 60 * 1000, // 1 minute\r\n  },\r\n  portfolio: {\r\n    maxRequests: 200,\r\n    windowMs: 60 * 1000, // 1 minute\r\n  }\r\n};\r\n\r\n// Backend configuration\r\nexport const BACKEND_CONFIG = {\r\n  requestTimeout: 10000, // 10 seconds\r\n  retryAttempts: 3,\r\n  retryDelay: 1000, // 1 second\r\n};\r\n\r\n// WebSocket configuration\r\nexport const WS_CONFIG = {\r\n  reconnectAttempts: 5,\r\n  reconnectDelay: 1000,\r\n  maxReconnectDelay: 30000,\r\n  connectionTimeout: 10000\r\n};\r\n\r\n// Chain validation function\r\nexport function isValidChain(chainId: number): boolean {\r\n  return ALLOWED_CHAIN_IDS.includes(chainId);\r\n}\r\n\r\n// Environment validation function\r\nexport function validateEnvironment(): { \r\n  isValid: boolean; \r\n  missingVars: string[];\r\n  BACKEND_URL?: string;\r\n  WS_URL?: string;\r\n  CHAIN_ID?: number;\r\n} {\r\n  const requiredVars = [\r\n    'NEXT_PUBLIC_DSTK_TOKEN_ADDRESS',\r\n    'NEXT_PUBLIC_DESTOCK_CONTRACT_ADDRESS',\r\n    'PRIVATE_KEY',\r\n    'NEXT_PUBLIC_WS_URL'\r\n  ];\r\n\r\n  const missingVars = requiredVars.filter(varName => {\r\n    const value = process.env[varName];\r\n    return !value || value.trim() === '';\r\n  });\r\n\r\n  return {\r\n    isValid: missingVars.length === 0,\r\n    missingVars,\r\n    BACKEND_URL: API_ENDPOINTS.backend,\r\n    WS_URL: getWebSocketUrl(),\r\n    CHAIN_ID: DEFAULT_CHAIN_ID\r\n  };\r\n}\r\n\r\n// Get WebSocket URL based on environment\r\nexport function getWebSocketUrl(): string {\r\n  const env = process.env.NODE_ENV || 'development';\r\n  \r\n  if (env === 'production') {\r\n    return WS_URLS.production;\r\n  } else {\r\n    return WS_URLS.development;\r\n  }\r\n}\r\n\r\n// Chain configuration objects\r\nexport const CHAIN_CONFIG = {\r\n  [31337]: {\r\n    id: 31337,\r\n    name: 'Anvil Local',\r\n    rpcUrl: 'http://127.0.0.1:8545',\r\n    nativeCurrency: { name: 'ETH', symbol: 'ETH', decimals: 18 }\r\n  },\r\n  [11155111]: {\r\n    id: 11155111,\r\n    name: 'Sepolia Testnet',\r\n    rpcUrl: 'https://sepolia.infura.io/v3/',\r\n    nativeCurrency: { name: 'ETH', symbol: 'ETH', decimals: 18 }\r\n  }\r\n};\r\n"],"names":[],"mappings":"AAAA;;;CAGC,GAED,sBAAsB;;;;;;;;;;;;;;;;;AACf,MAAM,oBAAoB;IAAC;IAAO;CAAS,EAAE,kCAAkC;AAC/E,MAAM,mBAAmB;AAGzB,MAAM,qBAAqB,kFAA8C;AACzE,MAAM,2BAA2B,kFAAoD;AAGrF,MAAM,UAAU;IACrB,aAAa;IACb,SAAS,QAAQ,GAAG,CAAC,0BAA0B,IAAI;IACnD,YAAY,2DAAkC;AAChD;AAGO,MAAM,gBAAgB;IAC3B,QAAQ;IACR,QAAQ;IACR,WAAW;IACX,aAAa,6DAA4C;IACzD,SAAS,6DAAuC;AAClD;AAGO,MAAM,gBAAgB;IAC3B,QAAQ;IACR,iBAAiB,KAAK,KAAK,KAAK;IAChC,eAAe;AACjB;AAGO,MAAM,gBAAgB;IAC3B,QAAQ;QACN,aAAa;QACb,UAAU,KAAK,KAAK;IACtB;IACA,QAAQ;QACN,aAAa;QACb,UAAU,KAAK;IACjB;IACA,SAAS;QACP,aAAa;QACb,UAAU,KAAK;IACjB;IACA,WAAW;QACT,aAAa;QACb,UAAU,KAAK;IACjB;AACF;AAGO,MAAM,iBAAiB;IAC5B,gBAAgB;IAChB,eAAe;IACf,YAAY;AACd;AAGO,MAAM,YAAY;IACvB,mBAAmB;IACnB,gBAAgB;IAChB,mBAAmB;IACnB,mBAAmB;AACrB;AAGO,SAAS,aAAa,OAAe;IAC1C,OAAO,kBAAkB,QAAQ,CAAC;AACpC;AAGO,SAAS;IAOd,MAAM,eAAe;QACnB;QACA;QACA;QACA;KACD;IAED,MAAM,cAAc,aAAa,MAAM,CAAC,CAAA;QACtC,MAAM,QAAQ,QAAQ,GAAG,CAAC,QAAQ;QAClC,OAAO,CAAC,SAAS,MAAM,IAAI,OAAO;IACpC;IAEA,OAAO;QACL,SAAS,YAAY,MAAM,KAAK;QAChC;QACA,aAAa,cAAc,OAAO;QAClC,QAAQ;QACR,UAAU;IACZ;AACF;AAGO,SAAS;IACd,MAAM,MAAM,mDAAwB;IAEpC,uCAA0B;;IAE1B,OAAO;QACL,OAAO,QAAQ,WAAW;IAC5B;AACF;AAGO,MAAM,eAAe;IAC1B,CAAC,MAAM,EAAE;QACP,IAAI;QACJ,MAAM;QACN,QAAQ;QACR,gBAAgB;YAAE,MAAM;YAAO,QAAQ;YAAO,UAAU;QAAG;IAC7D;IACA,CAAC,SAAS,EAAE;QACV,IAAI;QACJ,MAAM;QACN,QAAQ;QACR,gBAAgB;YAAE,MAAM;YAAO,QAAQ;YAAO,UAAU;QAAG;IAC7D;AACF","debugId":null}},
    {"offset": {"line": 617, "column": 0}, "map": {"version":3,"sources":["file:///D:/intel/web3ssh/DeStock-1/apps/web/app/api/market/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { generateOHLCData, calculateSMA, calculateEMA, calculateRSI, generateVolumeData } from '@/lib/utils/chartData';\r\nimport { getAllCompanies } from '@/lib/utils/companyUtils';\r\nimport { validateEnvironment, BACKEND_CONFIG, RATE_LIMITING } from '@/lib/constants/shared';\r\n\r\n// Rate limiting store\r\nconst requestCounts = new Map<string, { count: number; resetTime: number }>();\r\n\r\n// Cache store\r\nconst cache = new Map<string, { data: any; expiry: number }>();\r\n\r\nfunction getRateLimitKey(request: NextRequest): string {\r\n  const forwarded = request.headers.get('x-forwarded-for');\r\n  const ip = forwarded ? forwarded.split(',')[0].trim() : \r\n            request.headers.get('x-real-ip') || \r\n            'unknown';\r\n  return `market_${ip}`;\r\n}\r\n\r\nfunction checkRateLimit(key: string): { allowed: boolean; remaining: number; resetTime: number } {\r\n  const now = Date.now();\r\n  const limit = RATE_LIMITING.market;\r\n  \r\n  let record = requestCounts.get(key);\r\n  \r\n  if (!record || now > record.resetTime) {\r\n    record = {\r\n      count: 0,\r\n      resetTime: now + limit.windowMs\r\n    };\r\n    requestCounts.set(key, record);\r\n  }\r\n  \r\n  if (record.count >= limit.maxRequests) {\r\n    return {\r\n      allowed: false,\r\n      remaining: 0,\r\n      resetTime: record.resetTime\r\n    };\r\n  }\r\n  \r\n  record.count++;\r\n  \r\n  return {\r\n    allowed: true,\r\n    remaining: limit.maxRequests - record.count,\r\n    resetTime: record.resetTime\r\n  };\r\n}\r\n\r\nfunction getCachedData(key: string): any | null {\r\n  const cached = cache.get(key);\r\n  if (cached && Date.now() < cached.expiry) {\r\n    return cached.data;\r\n  }\r\n  if (cached) {\r\n    cache.delete(key);\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction setCachedData(key: string, data: any, ttlSeconds: number = 60): void {\r\n  cache.set(key, {\r\n    data,\r\n    expiry: Date.now() + (ttlSeconds * 1000)\r\n  });\r\n}\r\n\r\nasync function fetchFromBackend(endpoint: string, options: RequestInit = {}): Promise<any> {\r\n  const config = validateEnvironment();\r\n  \r\n  if (!config.BACKEND_URL) {\r\n    throw new Error('Backend URL not configured');\r\n  }\r\n  \r\n  const controller = new AbortController();\r\n  const timeout = setTimeout(() => controller.abort(), BACKEND_CONFIG.requestTimeout);\r\n  \r\n  try {\r\n    const response = await fetch(`${config.BACKEND_URL}${endpoint}`, {\r\n      ...options,\r\n      signal: controller.signal,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n    });\r\n    \r\n    clearTimeout(timeout);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Backend error: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    clearTimeout(timeout);\r\n    if (error instanceof Error && error.name === 'AbortError') {\r\n      throw new Error('Backend request timeout');\r\n    }\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function getMarketDataFromBackend(type: string, params: Record<string, any> = {}): Promise<any> {\r\n  try {\r\n    switch (type) {\r\n      case 'companies':\r\n        return await fetchFromBackend('/api/companies');\r\n      \r\n      case 'ticker':\r\n        return await fetchFromBackend('/api/market/ticker');\r\n      \r\n      case 'heatmap':\r\n        return await fetchFromBackend('/api/market/heatmap');\r\n      \r\n      case 'chart':\r\n        const { symbol, timeframe, days } = params;\r\n        return await fetchFromBackend(`/api/market/chart?symbol=${symbol}&timeframe=${timeframe}&days=${days}`);\r\n      \r\n      case 'overview':\r\n      default:\r\n        return await fetchFromBackend('/api/market/overview');\r\n    }\r\n  } catch (error) {\r\n    console.error(`Backend fetch failed for ${type}:`, error);\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction generateFallbackData(type: string, params: Record<string, any> = {}): any {\r\n  const memeCompanies = getAllCompanies();\r\n  \r\n  switch (type) {\r\n    case 'companies':\r\n      return {\r\n        companies: memeCompanies.map((company, index) => ({\r\n          id: index,\r\n          name: company.name,\r\n          symbol: company.symbol,\r\n          owner: '0x' + Math.random().toString(16).substr(2, 40),\r\n          initialPrice: company.price.replace('$', ''),\r\n          totalSupply: '1000000',\r\n          currentPrice: company.price.replace('$', ''),\r\n          price: parseFloat(company.price.replace('$', '')),\r\n          change: (Math.random() - 0.5) * 20,\r\n          changePercent: (Math.random() - 0.5) * 20,\r\n          volume: Math.floor(Math.random() * 1000000),\r\n          marketCap: parseFloat(company.marketCap.replace(/[$BM]/g, '')) * (company.marketCap.includes('B') ? 1000000000 : 1000000),\r\n          sector: company.sector,\r\n          logo: company.logo,\r\n          tokenData: company\r\n        }))\r\n      };\r\n    \r\n    case 'ticker':\r\n      return {\r\n        ticker: memeCompanies.slice(0, 10).map(company => ({\r\n          symbol: company.symbol,\r\n          name: company.name,\r\n          price: parseFloat(company.price.replace('$', '')),\r\n          change: (Math.random() - 0.5) * 10,\r\n          changePercent: (Math.random() - 0.5) * 15,\r\n          volume: Math.floor(Math.random() * 1000000),\r\n        }))\r\n      };\r\n    \r\n    case 'heatmap':\r\n      return {\r\n        heatmap: memeCompanies.slice(0, 12).map((company) => {\r\n          const marketCapValue = parseFloat(company.marketCap.replace(/[$BM]/g, ''));\r\n          const marketCapInNumber = company.marketCap.includes('B') ? marketCapValue * 1000000000 : marketCapValue * 1000000;\r\n          \r\n          return {\r\n            id: company.id,\r\n            name: company.name,\r\n            symbol: company.symbol,\r\n            value: parseFloat(company.price.replace('$', '')),\r\n            change: (Math.random() - 0.5) * 20,\r\n            size: Math.min(Math.max((marketCapInNumber / 1000000000) * 50 + 40, 40), 120)\r\n          };\r\n        })\r\n      };\r\n    \r\n    case 'chart':\r\n      const { symbol, days = 30 } = params;\r\n      const basePrice = 100 + Math.random() * 100;\r\n      const ohlcData = generateOHLCData(days, basePrice, 0.025);\r\n      const volumeData = generateVolumeData(ohlcData);\r\n      const sma = calculateSMA(ohlcData, 20);\r\n      const ema = calculateEMA(ohlcData, 20);\r\n      const rsi = calculateRSI(ohlcData, 14);\r\n\r\n      const emaFast = calculateEMA(ohlcData, 12);\r\n      const emaSlow = calculateEMA(ohlcData, 26);\r\n      const macd = emaFast.map((fast) => {\r\n        const slow = emaSlow.find(s => s.time === fast.time);\r\n        if (!slow) return null;\r\n        \r\n        const macdValue = fast.value - slow.value;\r\n        return {\r\n          time: fast.time,\r\n          macd: Number(macdValue.toFixed(4)),\r\n          signal: 0,\r\n          histogram: Number(macdValue.toFixed(4)),\r\n        };\r\n      }).filter(Boolean);\r\n\r\n      return {\r\n        symbol,\r\n        timeframe: params.timeframe || '1D',\r\n        data: {\r\n          ohlc: ohlcData,\r\n          volume: volumeData,\r\n          indicators: { sma, ema, rsi, macd },\r\n        },\r\n      };\r\n    \r\n    case 'overview':\r\n    default:\r\n      const companies = memeCompanies.slice(0, 15).map((company, index) => ({\r\n        id: index,\r\n        name: company.name,\r\n        symbol: company.symbol,\r\n        owner: '0x' + Math.random().toString(16).substr(2, 40),\r\n        initialPrice: company.price.replace('$', ''),\r\n        totalSupply: '1000000',\r\n        currentPrice: company.price.replace('$', ''),\r\n        price: parseFloat(company.price.replace('$', '')),\r\n        change: (Math.random() - 0.5) * 20,\r\n        changePercent: (Math.random() - 0.5) * 20,\r\n        volume: Math.floor(Math.random() * 1000000),\r\n        marketCap: parseFloat(company.marketCap.replace(/[$BM]/g, '')) * (company.marketCap.includes('B') ? 1000000000 : 1000000),\r\n        sector: company.sector,\r\n        logo: company.logo,\r\n        tokenData: company\r\n      }));\r\n      \r\n      const marketStats = {\r\n        totalMarketCap: companies.reduce((sum, c) => sum + c.marketCap, 0),\r\n        totalVolume: companies.reduce((sum, c) => sum + c.volume, 0),\r\n        gainers: companies.filter(c => c.change > 0).length,\r\n        losers: companies.filter(c => c.change < 0).length,\r\n        unchanged: companies.filter(c => c.change === 0).length,\r\n      };\r\n\r\n      return {\r\n        companies,\r\n        stats: marketStats,\r\n        timestamp: Date.now(),\r\n      };\r\n  }\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Rate limiting\r\n    const rateLimitKey = getRateLimitKey(request);\r\n    const rateLimitResult = checkRateLimit(rateLimitKey);\r\n    \r\n    if (!rateLimitResult.allowed) {\r\n      return NextResponse.json(\r\n        { error: 'Rate limit exceeded', retryAfter: Math.ceil((rateLimitResult.resetTime - Date.now()) / 1000) },\r\n        { \r\n          status: 429,\r\n          headers: {\r\n            'X-RateLimit-Remaining': '0',\r\n            'X-RateLimit-Reset': rateLimitResult.resetTime.toString(),\r\n            'Retry-After': Math.ceil((rateLimitResult.resetTime - Date.now()) / 1000).toString()\r\n          }\r\n        }\r\n      );\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url);\r\n    const symbol = searchParams.get('symbol');\r\n    const timeframe = searchParams.get('timeframe') || '1D';\r\n    const days = parseInt(searchParams.get('days') || '30');\r\n    const type = searchParams.get('type') || 'overview';\r\n\r\n    // Create cache key\r\n    const cacheKey = `market_${type}_${symbol || 'all'}_${timeframe}_${days}`;\r\n    \r\n    // Check cache first\r\n    const cachedData = getCachedData(cacheKey);\r\n    if (cachedData) {\r\n      return NextResponse.json({\r\n        ...cachedData,\r\n        cached: true,\r\n        timestamp: Date.now()\r\n      }, {\r\n        headers: {\r\n          'X-RateLimit-Remaining': rateLimitResult.remaining.toString(),\r\n          'X-Cache': 'HIT'\r\n        }\r\n      });\r\n    }\r\n\r\n    let responseData: any;\r\n    let dataSource = 'backend';\r\n\r\n    // Try to get data from backend first\r\n    const backendData = await getMarketDataFromBackend(type, { symbol, timeframe, days });\r\n    \r\n    if (backendData) {\r\n      responseData = backendData;\r\n    } else {\r\n      // Fallback to mock data\r\n      dataSource = 'fallback';\r\n      responseData = generateFallbackData(type, { symbol, timeframe, days });\r\n      \r\n      // Add a shorter TTL for fallback data\r\n      setCachedData(cacheKey, responseData, 30);\r\n    }\r\n\r\n    // Cache successful responses\r\n    if (dataSource === 'backend') {\r\n      setCachedData(cacheKey, responseData, 60);\r\n    }\r\n\r\n    // Add metadata\r\n    responseData.meta = {\r\n      source: dataSource,\r\n      timestamp: Date.now(),\r\n      cached: false\r\n    };\r\n\r\n    return NextResponse.json(responseData, {\r\n      headers: {\r\n        'X-RateLimit-Remaining': rateLimitResult.remaining.toString(),\r\n        'X-Data-Source': dataSource,\r\n        'X-Cache': 'MISS'\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Market API error:', error);\r\n    \r\n    // Try to return fallback data in case of critical errors\r\n    try {\r\n      const { searchParams } = new URL(request.url);\r\n      const type = searchParams.get('type') || 'overview';\r\n      const fallbackData = generateFallbackData(type);\r\n      \r\n      return NextResponse.json({\r\n        ...fallbackData,\r\n        meta: {\r\n          source: 'emergency_fallback',\r\n          timestamp: Date.now(),\r\n          error: 'Primary services unavailable'\r\n        }\r\n      }, { \r\n        status: 206, // Partial Content\r\n        headers: {\r\n          'X-Data-Source': 'emergency_fallback'\r\n        }\r\n      });\r\n    } catch {\r\n      return NextResponse.json(\r\n        { error: 'All market data services unavailable' },\r\n        { status: 503 }\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Rate limiting for POST requests\r\n    const rateLimitKey = getRateLimitKey(request);\r\n    const rateLimitResult = checkRateLimit(rateLimitKey);\r\n    \r\n    if (!rateLimitResult.allowed) {\r\n      return NextResponse.json(\r\n        { error: 'Rate limit exceeded' },\r\n        { status: 429 }\r\n      );\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { action, symbol, quantity, price } = body;\r\n\r\n    // Validate input\r\n    if (!action || !symbol || !quantity || !price) {\r\n      return NextResponse.json(\r\n        { error: 'Missing required fields: action, symbol, quantity, price' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (!['buy', 'sell'].includes(action)) {\r\n      return NextResponse.json(\r\n        { error: 'Invalid action. Must be \"buy\" or \"sell\"' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Try to execute trade via backend\r\n    try {\r\n      const tradeResult = await fetchFromBackend('/api/trades', {\r\n        method: 'POST',\r\n        body: JSON.stringify({ action, symbol, quantity, price })\r\n      });\r\n      \r\n      return NextResponse.json({\r\n        ...tradeResult,\r\n        meta: { source: 'backend', timestamp: Date.now() }\r\n      });\r\n    } catch (backendError) {\r\n      console.error('Backend trade execution failed:', backendError);\r\n      \r\n      // Fallback to mock execution\r\n      await new Promise(resolve => setTimeout(resolve, Math.random() * 1000 + 500));\r\n      \r\n      const executionPrice = price * (1 + (Math.random() - 0.5) * 0.001);\r\n      \r\n      return NextResponse.json({\r\n        success: true,\r\n        transaction: {\r\n          id: Math.random().toString(36).substr(2, 9),\r\n          symbol,\r\n          action,\r\n          quantity,\r\n          requestedPrice: price,\r\n          executedPrice: Number(executionPrice.toFixed(2)),\r\n          timestamp: Date.now(),\r\n          status: 'executed',\r\n        },\r\n        meta: {\r\n          source: 'fallback',\r\n          timestamp: Date.now(),\r\n          warning: 'Backend unavailable, using mock execution'\r\n        }\r\n      });\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Market API POST error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to process trade request' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}