{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///D:/intel/web3ssh/DeStock-1/apps/web/lib/utils/chartData.ts"],"sourcesContent":["// Utility functions for generating and managing chart data\r\n\r\nexport interface OHLCData {\r\n  time: number;\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  volume?: number;\r\n}\r\n\r\nexport interface IndicatorData {\r\n  time: number;\r\n  value: number;\r\n}\r\n\r\nexport interface ChartData {\r\n  ohlc: OHLCData[];\r\n  volume: { time: number; value: number; color?: string }[];\r\n  sma?: IndicatorData[];\r\n  ema?: IndicatorData[];\r\n  rsi?: IndicatorData[];\r\n  macd?: {\r\n    time: number;\r\n    macd: number;\r\n    signal: number;\r\n    histogram: number;\r\n  }[];\r\n}\r\n\r\n// Generate realistic OHLC data\r\nexport function generateOHLCData(\r\n  days: number = 30,\r\n  startPrice: number = 100,\r\n  volatility: number = 0.02\r\n): OHLCData[] {\r\n  const data: OHLCData[] = [];\r\n  let currentPrice = startPrice;\r\n  const now = Date.now();\r\n  const dayMs = 24 * 60 * 60 * 1000;\r\n\r\n  for (let i = days; i >= 0; i--) {\r\n    const time = now - (i * dayMs);\r\n    \r\n    // Generate random price movements\r\n    const change = (Math.random() - 0.5) * volatility * currentPrice;\r\n    const open = currentPrice;\r\n    const close = open + change;\r\n    \r\n    // Generate high and low based on open and close\r\n    const maxPrice = Math.max(open, close);\r\n    const minPrice = Math.min(open, close);\r\n    const high = maxPrice + Math.random() * 0.01 * currentPrice;\r\n    const low = minPrice - Math.random() * 0.01 * currentPrice;\r\n    \r\n    // Generate volume (higher volume on bigger price changes)\r\n    const volume = Math.floor(\r\n      (10000 + Math.random() * 50000) * (1 + Math.abs(change) / currentPrice * 5)\r\n    );\r\n\r\n    data.push({\r\n      time: Math.floor(time / 1000), // Lightweight Charts expects seconds\r\n      open: Number(open.toFixed(2)),\r\n      high: Number(high.toFixed(2)),\r\n      low: Number(low.toFixed(2)),\r\n      close: Number(close.toFixed(2)),\r\n      volume,\r\n    });\r\n\r\n    currentPrice = close;\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n// Calculate Simple Moving Average\r\nexport function calculateSMA(data: OHLCData[], period: number = 20): IndicatorData[] {\r\n  const sma: IndicatorData[] = [];\r\n  \r\n  for (let i = period - 1; i < data.length; i++) {\r\n    let sum = 0;\r\n    for (let j = i - period + 1; j <= i; j++) {\r\n      sum += data[j].close;\r\n    }\r\n    \r\n    sma.push({\r\n      time: data[i].time,\r\n      value: Number((sum / period).toFixed(2)),\r\n    });\r\n  }\r\n  \r\n  return sma;\r\n}\r\n\r\n// Calculate Exponential Moving Average\r\nexport function calculateEMA(data: OHLCData[], period: number = 20): IndicatorData[] {\r\n  const ema: IndicatorData[] = [];\r\n  const multiplier = 2 / (period + 1);\r\n  \r\n  // Start with SMA for the first value\r\n  let sum = 0;\r\n  for (let i = 0; i < period; i++) {\r\n    sum += data[i].close;\r\n  }\r\n  \r\n  ema.push({\r\n    time: data[period - 1].time,\r\n    value: Number((sum / period).toFixed(2)),\r\n  });\r\n  \r\n  // Calculate EMA for the rest\r\n  for (let i = period; i < data.length; i++) {\r\n    const value = (data[i].close - ema[ema.length - 1].value) * multiplier + ema[ema.length - 1].value;\r\n    ema.push({\r\n      time: data[i].time,\r\n      value: Number(value.toFixed(2)),\r\n    });\r\n  }\r\n  \r\n  return ema;\r\n}\r\n\r\n// Calculate RSI (Relative Strength Index)\r\nexport function calculateRSI(data: OHLCData[], period: number = 14): IndicatorData[] {\r\n  const rsi: IndicatorData[] = [];\r\n  const gains: number[] = [];\r\n  const losses: number[] = [];\r\n  \r\n  // Calculate gains and losses\r\n  for (let i = 1; i < data.length; i++) {\r\n    const change = data[i].close - data[i - 1].close;\r\n    gains.push(change > 0 ? change : 0);\r\n    losses.push(change < 0 ? -change : 0);\r\n  }\r\n  \r\n  // Calculate initial average gain and loss\r\n  let avgGain = gains.slice(0, period).reduce((a, b) => a + b, 0) / period;\r\n  let avgLoss = losses.slice(0, period).reduce((a, b) => a + b, 0) / period;\r\n  \r\n  // Calculate RSI\r\n  for (let i = period; i < data.length; i++) {\r\n    const rs = avgGain / avgLoss;\r\n    const rsiValue = 100 - (100 / (1 + rs));\r\n    \r\n    rsi.push({\r\n      time: data[i].time,\r\n      value: Number(rsiValue.toFixed(2)),\r\n    });\r\n    \r\n    // Update average gain and loss for next iteration\r\n    if (i < data.length - 1) {\r\n      const change = data[i + 1].close - data[i].close;\r\n      const gain = change > 0 ? change : 0;\r\n      const loss = change < 0 ? -change : 0;\r\n      \r\n      avgGain = (avgGain * (period - 1) + gain) / period;\r\n      avgLoss = (avgLoss * (period - 1) + loss) / period;\r\n    }\r\n  }\r\n  \r\n  return rsi;\r\n}\r\n\r\n// Generate volume data with colors\r\nexport function generateVolumeData(ohlcData: OHLCData[]): { time: number; value: number; color?: string }[] {\r\n  return ohlcData.map((candle, index) => {\r\n    const prevCandle = index > 0 ? ohlcData[index - 1] : candle;\r\n    const isUp = candle.close > prevCandle.close;\r\n    \r\n    return {\r\n      time: candle.time,\r\n      value: candle.volume || 0,\r\n      color: isUp ? '#00D4AA' : '#F6465D', // Success green for up, danger red for down\r\n    };\r\n  });\r\n}\r\n\r\n// Generate mock company data\r\nexport function generateCompanyData(count: number = 20) {\r\n  const companies = [\r\n    'Apple Inc.', 'Microsoft Corp.', 'Amazon.com Inc.', 'Alphabet Inc.',\r\n    'Tesla Inc.', 'Meta Platforms', 'NVIDIA Corp.', 'Netflix Inc.',\r\n    'PayPal Holdings', 'Adobe Inc.', 'Salesforce Inc.', 'Zoom Video',\r\n    'Spotify Technology', 'Uber Technologies', 'Airbnb Inc.', 'Twitter Inc.',\r\n    'Snap Inc.', 'Pinterest Inc.', 'Shopify Inc.', 'Square Inc.',\r\n  ];\r\n  \r\n  const sectors = [\r\n    'Technology', 'Consumer Discretionary', 'Communication Services',\r\n    'Healthcare', 'Financials', 'Industrials', 'Consumer Staples',\r\n  ];\r\n  \r\n  return Array.from({ length: Math.min(count, companies.length) }, (_, index) => {\r\n    const basePrice = 50 + Math.random() * 200;\r\n    const change = (Math.random() - 0.5) * 0.1 * basePrice;\r\n    const changePercent = (change / basePrice) * 100;\r\n    \r\n    return {\r\n      id: index,\r\n      name: companies[index],\r\n      symbol: companies[index].split(' ')[0].slice(0, 4).toUpperCase(),\r\n      sector: sectors[Math.floor(Math.random() * sectors.length)],\r\n      price: Number(basePrice.toFixed(2)),\r\n      change: Number(change.toFixed(2)),\r\n      changePercent: Number(changePercent.toFixed(2)),\r\n      volume: Math.floor(Math.random() * 1000000) + 100000,\r\n      marketCap: Math.floor((basePrice * (Math.random() * 1000000 + 100000)) / 1000) * 1000,\r\n      chartData: generateOHLCData(30, basePrice, 0.02),\r\n    };\r\n  });\r\n}\r\n\r\n// Generate portfolio data\r\nexport function generatePortfolioData() {\r\n  const holdings = generateCompanyData(8).map((company) => {\r\n    const shares = Math.floor(Math.random() * 100) + 10;\r\n    const avgCost = company.price * (0.8 + Math.random() * 0.4); // Â±20% from current price\r\n    const totalValue = shares * company.price;\r\n    const totalCost = shares * avgCost;\r\n    const pnl = totalValue - totalCost;\r\n    const pnlPercent = (pnl / totalCost) * 100;\r\n    \r\n    return {\r\n      ...company,\r\n      shares,\r\n      avgCost: Number(avgCost.toFixed(2)),\r\n      totalValue: Number(totalValue.toFixed(2)),\r\n      totalCost: Number(totalCost.toFixed(2)),\r\n      pnl: Number(pnl.toFixed(2)),\r\n      pnlPercent: Number(pnlPercent.toFixed(2)),\r\n    };\r\n  });\r\n  \r\n  const totalValue = holdings.reduce((sum, holding) => sum + holding.totalValue, 0);\r\n  const totalCost = holdings.reduce((sum, holding) => sum + holding.totalCost, 0);\r\n  const totalPnL = totalValue - totalCost;\r\n  const totalPnLPercent = (totalPnL / totalCost) * 100;\r\n  \r\n  return {\r\n    holdings,\r\n    summary: {\r\n      totalValue: Number(totalValue.toFixed(2)),\r\n      totalCost: Number(totalCost.toFixed(2)),\r\n      totalPnL: Number(totalPnL.toFixed(2)),\r\n      totalPnLPercent: Number(totalPnLPercent.toFixed(2)),\r\n      dayChange: Number((totalValue * (Math.random() - 0.5) * 0.02).toFixed(2)),\r\n      dayChangePercent: Number(((Math.random() - 0.5) * 2).toFixed(2)),\r\n    },\r\n  };\r\n}\r\n\r\n// Real-time data simulation\r\nexport function createRealTimeDataStream(\r\n  initialData: OHLCData[],\r\n  callback: (newData: OHLCData) => void,\r\n  interval: number = 5000\r\n) {\r\n  const lastCandle = initialData[initialData.length - 1];\r\n  let currentPrice = lastCandle.close;\r\n  \r\n  const generateNextCandle = () => {\r\n    const now = Math.floor(Date.now() / 1000);\r\n    const change = (Math.random() - 0.5) * 0.02 * currentPrice;\r\n    const open = currentPrice;\r\n    const close = open + change;\r\n    const high = Math.max(open, close) + Math.random() * 0.005 * currentPrice;\r\n    const low = Math.min(open, close) - Math.random() * 0.005 * currentPrice;\r\n    const volume = Math.floor(Math.random() * 50000) + 10000;\r\n    \r\n    const newCandle: OHLCData = {\r\n      time: now,\r\n      open: Number(open.toFixed(2)),\r\n      high: Number(high.toFixed(2)),\r\n      low: Number(low.toFixed(2)),\r\n      close: Number(close.toFixed(2)),\r\n      volume,\r\n    };\r\n    \r\n    currentPrice = close;\r\n    callback(newCandle);\r\n  };\r\n  \r\n  const intervalId = setInterval(generateNextCandle, interval);\r\n  \r\n  return () => clearInterval(intervalId);\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 297, "column": 0}, "map": {"version":3,"sources":["file:///D:/intel/web3ssh/DeStock-1/apps/web/lib/constants/shared.ts"],"sourcesContent":["/**\r\n * Shared constants for DeStock trading platform\r\n * Centralizes configuration values used across multiple components\r\n */\r\n\r\n// Chain configuration\r\nexport const ALLOWED_CHAIN_IDS = [31337, 11155111]; // Local Anvil and Sepolia testnet\r\nexport const DEFAULT_CHAIN_ID = 31337;\r\n\r\n// Contract addresses\r\nexport const DSTK_TOKEN_ADDRESS = process.env.NEXT_PUBLIC_DSTK_TOKEN_ADDRESS || '';\r\nexport const DESTOCK_CONTRACT_ADDRESS = process.env.NEXT_PUBLIC_DESTOCK_CONTRACT_ADDRESS || '';\r\n\r\n// WebSocket URLs for different environments\r\nexport const WS_URLS = {\r\n  development: 'ws://localhost:8080',\r\n  staging: process.env.NEXT_PUBLIC_WS_STAGING_URL || 'ws://localhost:8080',\r\n  production: process.env.NEXT_PUBLIC_WS_URL || ''\r\n};\r\n\r\n// API endpoints\r\nexport const API_ENDPOINTS = {\r\n  faucet: '/api/faucet',\r\n  market: '/api/market', \r\n  portfolio: '/api/portfolio',\r\n  tradeEngine: process.env.NEXT_PUBLIC_TRADE_ENGINE_URL || 'http://localhost:3002',\r\n  backend: process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:3001'\r\n};\r\n\r\n// Faucet configuration\r\nexport const FAUCET_CONFIG = {\r\n  amount: '1000', // DSTK tokens to mint\r\n  rateLimitWindow: 24 * 60 * 60 * 1000, // 24 hours in milliseconds\r\n  allowedChains: ALLOWED_CHAIN_IDS\r\n};\r\n\r\n// Rate limiting configuration\r\nexport const RATE_LIMITING = {\r\n  faucet: {\r\n    maxRequests: 5,\r\n    windowMs: 15 * 60 * 1000, // 15 minutes\r\n  },\r\n  market: {\r\n    maxRequests: 100,\r\n    windowMs: 60 * 1000, // 1 minute\r\n  },\r\n  trading: {\r\n    maxRequests: 50,\r\n    windowMs: 60 * 1000, // 1 minute\r\n  },\r\n  portfolio: {\r\n    maxRequests: 200,\r\n    windowMs: 60 * 1000, // 1 minute\r\n  }\r\n};\r\n\r\n// Backend configuration\r\nexport const BACKEND_CONFIG = {\r\n  requestTimeout: 10000, // 10 seconds\r\n  retryAttempts: 3,\r\n  retryDelay: 1000, // 1 second\r\n};\r\n\r\n// WebSocket configuration\r\nexport const WS_CONFIG = {\r\n  reconnectAttempts: 5,\r\n  reconnectDelay: 1000,\r\n  maxReconnectDelay: 30000,\r\n  connectionTimeout: 10000\r\n};\r\n\r\n// Chain validation function\r\nexport function isValidChain(chainId: number): boolean {\r\n  return ALLOWED_CHAIN_IDS.includes(chainId);\r\n}\r\n\r\n// Environment validation function\r\nexport function validateEnvironment(): { \r\n  isValid: boolean; \r\n  missingVars: string[];\r\n  BACKEND_URL?: string;\r\n  WS_URL?: string;\r\n  CHAIN_ID?: number;\r\n} {\r\n  const requiredVars = [\r\n    'NEXT_PUBLIC_DSTK_TOKEN_ADDRESS',\r\n    'NEXT_PUBLIC_DESTOCK_CONTRACT_ADDRESS',\r\n    'PRIVATE_KEY',\r\n    'NEXT_PUBLIC_WS_URL'\r\n  ];\r\n\r\n  const missingVars = requiredVars.filter(varName => {\r\n    const value = process.env[varName];\r\n    return !value || value.trim() === '';\r\n  });\r\n\r\n  return {\r\n    isValid: missingVars.length === 0,\r\n    missingVars,\r\n    BACKEND_URL: API_ENDPOINTS.backend,\r\n    WS_URL: getWebSocketUrl(),\r\n    CHAIN_ID: DEFAULT_CHAIN_ID\r\n  };\r\n}\r\n\r\n// Get WebSocket URL based on environment\r\nexport function getWebSocketUrl(): string {\r\n  const env = process.env.NODE_ENV || 'development';\r\n  \r\n  if (env === 'production') {\r\n    return WS_URLS.production;\r\n  } else {\r\n    return WS_URLS.development;\r\n  }\r\n}\r\n\r\n// Chain configuration objects\r\nexport const CHAIN_CONFIG = {\r\n  [31337]: {\r\n    id: 31337,\r\n    name: 'Anvil Local',\r\n    rpcUrl: 'http://127.0.0.1:8545',\r\n    nativeCurrency: { name: 'ETH', symbol: 'ETH', decimals: 18 }\r\n  },\r\n  [11155111]: {\r\n    id: 11155111,\r\n    name: 'Sepolia Testnet',\r\n    rpcUrl: 'https://sepolia.infura.io/v3/',\r\n    nativeCurrency: { name: 'ETH', symbol: 'ETH', decimals: 18 }\r\n  }\r\n};\r\n"],"names":[],"mappings":"AAAA;;;CAGC,GAED,sBAAsB;;;;;;;;;;;;;;;;;AACf,MAAM,oBAAoB;IAAC;IAAO;CAAS,EAAE,kCAAkC;AAC/E,MAAM,mBAAmB;AAGzB,MAAM,qBAAqB,kFAA8C;AACzE,MAAM,2BAA2B,kFAAoD;AAGrF,MAAM,UAAU;IACrB,aAAa;IACb,SAAS,QAAQ,GAAG,CAAC,0BAA0B,IAAI;IACnD,YAAY,2DAAkC;AAChD;AAGO,MAAM,gBAAgB;IAC3B,QAAQ;IACR,QAAQ;IACR,WAAW;IACX,aAAa,6DAA4C;IACzD,SAAS,6DAAuC;AAClD;AAGO,MAAM,gBAAgB;IAC3B,QAAQ;IACR,iBAAiB,KAAK,KAAK,KAAK;IAChC,eAAe;AACjB;AAGO,MAAM,gBAAgB;IAC3B,QAAQ;QACN,aAAa;QACb,UAAU,KAAK,KAAK;IACtB;IACA,QAAQ;QACN,aAAa;QACb,UAAU,KAAK;IACjB;IACA,SAAS;QACP,aAAa;QACb,UAAU,KAAK;IACjB;IACA,WAAW;QACT,aAAa;QACb,UAAU,KAAK;IACjB;AACF;AAGO,MAAM,iBAAiB;IAC5B,gBAAgB;IAChB,eAAe;IACf,YAAY;AACd;AAGO,MAAM,YAAY;IACvB,mBAAmB;IACnB,gBAAgB;IAChB,mBAAmB;IACnB,mBAAmB;AACrB;AAGO,SAAS,aAAa,OAAe;IAC1C,OAAO,kBAAkB,QAAQ,CAAC;AACpC;AAGO,SAAS;IAOd,MAAM,eAAe;QACnB;QACA;QACA;QACA;KACD;IAED,MAAM,cAAc,aAAa,MAAM,CAAC,CAAA;QACtC,MAAM,QAAQ,QAAQ,GAAG,CAAC,QAAQ;QAClC,OAAO,CAAC,SAAS,MAAM,IAAI,OAAO;IACpC;IAEA,OAAO;QACL,SAAS,YAAY,MAAM,KAAK;QAChC;QACA,aAAa,cAAc,OAAO;QAClC,QAAQ;QACR,UAAU;IACZ;AACF;AAGO,SAAS;IACd,MAAM,MAAM,mDAAwB;IAEpC,uCAA0B;;IAE1B,OAAO;QACL,OAAO,QAAQ,WAAW;IAC5B;AACF;AAGO,MAAM,eAAe;IAC1B,CAAC,MAAM,EAAE;QACP,IAAI;QACJ,MAAM;QACN,QAAQ;QACR,gBAAgB;YAAE,MAAM;YAAO,QAAQ;YAAO,UAAU;QAAG;IAC7D;IACA,CAAC,SAAS,EAAE;QACV,IAAI;QACJ,MAAM;QACN,QAAQ;QACR,gBAAgB;YAAE,MAAM;YAAO,QAAQ;YAAO,UAAU;QAAG;IAC7D;AACF","debugId":null}},
    {"offset": {"line": 428, "column": 0}, "map": {"version":3,"sources":["file:///D:/intel/web3ssh/DeStock-1/apps/web/app/api/portfolio/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { generatePortfolioData, generateOHLCData } from '@/lib/utils/chartData';\r\nimport { validateEnvironment, BACKEND_CONFIG, RATE_LIMITING } from '@/lib/constants/shared';\r\n\r\n// Rate limiting and cache stores\r\nconst requestCounts = new Map<string, { count: number; resetTime: number }>();\r\nconst cache = new Map<string, { data: any; expiry: number }>();\r\n\r\nfunction getRateLimitKey(request: NextRequest): string {\r\n  const forwarded = request.headers.get('x-forwarded-for');\r\n  const ip = forwarded ? forwarded.split(',')[0].trim() : \r\n            request.headers.get('x-real-ip') || \r\n            'unknown';\r\n  return `portfolio_${ip}`;\r\n}\r\n\r\nfunction checkRateLimit(key: string): { allowed: boolean; remaining: number; resetTime: number } {\r\n  const now = Date.now();\r\n  const limit = RATE_LIMITING.portfolio;\r\n  \r\n  let record = requestCounts.get(key);\r\n  \r\n  if (!record || now > record.resetTime) {\r\n    record = {\r\n      count: 0,\r\n      resetTime: now + limit.windowMs\r\n    };\r\n    requestCounts.set(key, record);\r\n  }\r\n  \r\n  if (record.count >= limit.maxRequests) {\r\n    return {\r\n      allowed: false,\r\n      remaining: 0,\r\n      resetTime: record.resetTime\r\n    };\r\n  }\r\n  \r\n  record.count++;\r\n  \r\n  return {\r\n    allowed: true,\r\n    remaining: limit.maxRequests - record.count,\r\n    resetTime: record.resetTime\r\n  };\r\n}\r\n\r\nfunction getCachedData(key: string): any | null {\r\n  const cached = cache.get(key);\r\n  if (cached && Date.now() < cached.expiry) {\r\n    return cached.data;\r\n  }\r\n  if (cached) {\r\n    cache.delete(key);\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction setCachedData(key: string, data: any, ttlSeconds: number = 30): void {\r\n  cache.set(key, {\r\n    data,\r\n    expiry: Date.now() + (ttlSeconds * 1000)\r\n  });\r\n}\r\n\r\nasync function fetchFromBackend(endpoint: string, options: RequestInit = {}): Promise<any> {\r\n  const config = validateEnvironment();\r\n  \r\n  if (!config.BACKEND_URL) {\r\n    throw new Error('Backend URL not configured');\r\n  }\r\n  \r\n  const controller = new AbortController();\r\n  const timeout = setTimeout(() => controller.abort(), BACKEND_CONFIG.requestTimeout);\r\n  \r\n  try {\r\n    const response = await fetch(`${config.BACKEND_URL}${endpoint}`, {\r\n      ...options,\r\n      signal: controller.signal,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n    });\r\n    \r\n    clearTimeout(timeout);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Backend error: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    clearTimeout(timeout);\r\n    if (error instanceof Error && error.name === 'AbortError') {\r\n      throw new Error('Backend request timeout');\r\n    }\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function getPortfolioFromBackend(type: string, address?: string, params: Record<string, any> = {}): Promise<any> {\r\n  try {\r\n    const queryParams = new URLSearchParams(params).toString();\r\n    const baseEndpoint = address ? `/api/portfolio/${address}` : '/api/portfolio';\r\n    const endpoint = `${baseEndpoint}/${type}${queryParams ? `?${queryParams}` : ''}`;\r\n    \r\n    return await fetchFromBackend(endpoint);\r\n  } catch (error) {\r\n    console.error(`Backend portfolio fetch failed for ${type}:`, error);\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction generateFallbackPortfolioData(type: string, params: Record<string, any> = {}): any {\r\n  const portfolioData = generatePortfolioData();\r\n  \r\n  switch (type) {\r\n    case 'overview':\r\n      const performanceHistory = generateOHLCData(30, portfolioData.summary.totalValue, 0.015)\r\n        .map(candle => ({\r\n          time: candle.time,\r\n          value: candle.close,\r\n          change: candle.close - candle.open,\r\n          changePercent: ((candle.close - candle.open) / candle.open) * 100,\r\n        }));\r\n\r\n      return {\r\n        ...portfolioData,\r\n        performance: {\r\n          history: performanceHistory,\r\n          timeframe: params.timeframe || '1M',\r\n        },\r\n        diversification: {\r\n          bySector: calculateSectorDiversification(portfolioData.holdings),\r\n          byPosition: calculatePositionSizing(portfolioData.holdings),\r\n        },\r\n        riskMetrics: {\r\n          beta: Number((0.8 + Math.random() * 0.6).toFixed(2)),\r\n          sharpeRatio: Number((0.5 + Math.random() * 1.0).toFixed(2)),\r\n          volatility: Number((15 + Math.random() * 10).toFixed(2)),\r\n          maxDrawdown: Number((5 + Math.random() * 15).toFixed(2)),\r\n        },\r\n      };\r\n    \r\n    case 'transactions':\r\n      const transactions = generateTransactionHistory(portfolioData.holdings);\r\n      return {\r\n        transactions,\r\n        pagination: {\r\n          page: parseInt(params.page) || 1,\r\n          limit: parseInt(params.limit) || 50,\r\n          total: transactions.length,\r\n        },\r\n      };\r\n    \r\n    case 'analytics':\r\n      return {\r\n        allocation: {\r\n          stocks: 85.5,\r\n          cash: 10.2,\r\n          other: 4.3,\r\n        },\r\n        performance: {\r\n          ytd: Number((Math.random() * 30 - 10).toFixed(2)),\r\n          oneMonth: Number((Math.random() * 10 - 3).toFixed(2)),\r\n          threeMonths: Number((Math.random() * 20 - 5).toFixed(2)),\r\n          oneYear: Number((Math.random() * 40 - 15).toFixed(2)),\r\n        },\r\n        topPerformers: portfolioData.holdings\r\n          .sort((a, b) => b.pnlPercent - a.pnlPercent)\r\n          .slice(0, 3),\r\n        bottomPerformers: portfolioData.holdings\r\n          .sort((a, b) => a.pnlPercent - b.pnlPercent)\r\n          .slice(0, 3),\r\n      };\r\n    \r\n    case 'positions':\r\n      return {\r\n        positions: portfolioData.holdings,\r\n        summary: {\r\n          totalPositions: portfolioData.holdings.length,\r\n          totalValue: portfolioData.summary.totalValue,\r\n          realizedPnL: portfolioData.summary.totalPnL,\r\n          unrealizedPnL: portfolioData.holdings.reduce((sum, h) => sum + (h.pnl || 0), 0),\r\n        }\r\n      };\r\n    \r\n    default:\r\n      throw new Error(`Unknown portfolio type: ${type}`);\r\n  }\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    // Rate limiting\r\n    const rateLimitKey = getRateLimitKey(request);\r\n    const rateLimitResult = checkRateLimit(rateLimitKey);\r\n    \r\n    if (!rateLimitResult.allowed) {\r\n      return NextResponse.json(\r\n        { error: 'Rate limit exceeded', retryAfter: Math.ceil((rateLimitResult.resetTime - Date.now()) / 1000) },\r\n        { \r\n          status: 429,\r\n          headers: {\r\n            'X-RateLimit-Remaining': '0',\r\n            'X-RateLimit-Reset': rateLimitResult.resetTime.toString(),\r\n            'Retry-After': Math.ceil((rateLimitResult.resetTime - Date.now()) / 1000).toString()\r\n          }\r\n        }\r\n      );\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url);\r\n    const type = searchParams.get('type') || 'overview';\r\n    const timeframe = searchParams.get('timeframe') || '1M';\r\n    const address = searchParams.get('address');\r\n    const page = searchParams.get('page') || '1';\r\n    const limit = searchParams.get('limit') || '50';\r\n\r\n    // Input validation\r\n    const validTypes = ['overview', 'transactions', 'analytics', 'positions', 'performance'];\r\n    if (!validTypes.includes(type)) {\r\n      return NextResponse.json(\r\n        { error: `Invalid type parameter. Must be one of: ${validTypes.join(', ')}` },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Create cache key\r\n    const cacheKey = `portfolio_${type}_${address || 'default'}_${timeframe}_${page}_${limit}`;\r\n    \r\n    // Check cache first\r\n    const cachedData = getCachedData(cacheKey);\r\n    if (cachedData) {\r\n      return NextResponse.json({\r\n        ...cachedData,\r\n        cached: true,\r\n        timestamp: Date.now()\r\n      }, {\r\n        headers: {\r\n          'X-RateLimit-Remaining': rateLimitResult.remaining.toString(),\r\n          'X-Cache': 'HIT'\r\n        }\r\n      });\r\n    }\r\n\r\n    let responseData: any;\r\n    let dataSource = 'backend';\r\n\r\n    // Try to get data from backend first\r\n    const backendData = await getPortfolioFromBackend(type, address || undefined, { \r\n      timeframe, \r\n      page, \r\n      limit \r\n    });\r\n    \r\n    if (backendData) {\r\n      responseData = backendData;\r\n    } else {\r\n      // Fallback to mock data\r\n      dataSource = 'fallback';\r\n      responseData = generateFallbackPortfolioData(type, { \r\n        timeframe, \r\n        page, \r\n        limit \r\n      });\r\n      \r\n      // Shorter TTL for fallback data\r\n      setCachedData(cacheKey, responseData, 20);\r\n    }\r\n\r\n    // Cache successful responses\r\n    if (dataSource === 'backend') {\r\n      setCachedData(cacheKey, responseData, 30);\r\n    }\r\n\r\n    // Add metadata\r\n    responseData.meta = {\r\n      source: dataSource,\r\n      timestamp: Date.now(),\r\n      cached: false,\r\n      type,\r\n      ...(address && { address }),\r\n    };\r\n\r\n    return NextResponse.json(responseData, {\r\n      headers: {\r\n        'X-RateLimit-Remaining': rateLimitResult.remaining.toString(),\r\n        'X-Data-Source': dataSource,\r\n        'X-Cache': 'MISS'\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Portfolio API error:', error);\r\n    \r\n    // Try to return fallback data in case of critical errors\r\n    try {\r\n      const { searchParams } = new URL(request.url);\r\n      const type = searchParams.get('type') || 'overview';\r\n      const fallbackData = generateFallbackPortfolioData(type);\r\n      \r\n      return NextResponse.json({\r\n        ...fallbackData,\r\n        meta: {\r\n          source: 'emergency_fallback',\r\n          timestamp: Date.now(),\r\n          error: 'Primary services unavailable'\r\n        }\r\n      }, { \r\n        status: 206, // Partial Content\r\n        headers: {\r\n          'X-Data-Source': 'emergency_fallback'\r\n        }\r\n      });\r\n    } catch {\r\n      return NextResponse.json(\r\n        { error: 'All portfolio services unavailable' },\r\n        { status: 503 }\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    // Rate limiting\r\n    const rateLimitKey = getRateLimitKey(request);\r\n    const rateLimitResult = checkRateLimit(rateLimitKey);\r\n    \r\n    if (!rateLimitResult.allowed) {\r\n      return NextResponse.json(\r\n        { error: 'Rate limit exceeded' },\r\n        { status: 429 }\r\n      );\r\n    }\r\n\r\n    const body = await request.json();\r\n    const { action, address, ...data } = body;\r\n\r\n    // Validate input\r\n    if (!action) {\r\n      return NextResponse.json(\r\n        { error: 'Missing required field: action' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const validActions = ['sync', 'update', 'refresh'];\r\n    if (!validActions.includes(action)) {\r\n      return NextResponse.json(\r\n        { error: `Invalid action. Must be one of: ${validActions.join(', ')}` },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Try to execute action via backend\r\n    try {\r\n      const actionResult = await fetchFromBackend('/api/portfolio/actions', {\r\n        method: 'POST',\r\n        body: JSON.stringify({ action, address, ...data })\r\n      });\r\n      \r\n      return NextResponse.json({\r\n        ...actionResult,\r\n        meta: { source: 'backend', timestamp: Date.now() }\r\n      });\r\n    } catch (backendError) {\r\n      console.error('Backend portfolio action failed:', backendError);\r\n      \r\n      // Fallback to mock response\r\n      return NextResponse.json({\r\n        success: true,\r\n        action,\r\n        message: `Portfolio ${action} completed (simulated)`,\r\n        meta: {\r\n          source: 'fallback',\r\n          timestamp: Date.now(),\r\n          warning: 'Backend unavailable, using mock response'\r\n        }\r\n      });\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Portfolio API POST error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to process portfolio action' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nfunction calculateSectorDiversification(holdings: any[]) {\r\n  const sectorTotals: { [key: string]: number } = {};\r\n  const totalValue = holdings.reduce((sum, h) => sum + h.totalValue, 0);\r\n  \r\n  holdings.forEach(holding => {\r\n    if (!sectorTotals[holding.sector]) {\r\n      sectorTotals[holding.sector] = 0;\r\n    }\r\n    sectorTotals[holding.sector] += holding.totalValue;\r\n  });\r\n  \r\n  return Object.entries(sectorTotals).map(([sector, value]) => ({\r\n    sector,\r\n    value: Number(value.toFixed(2)),\r\n    percentage: Number(((value / totalValue) * 100).toFixed(1)),\r\n  }));\r\n}\r\n\r\nfunction calculatePositionSizing(holdings: any[]) {\r\n  const totalValue = holdings.reduce((sum, h) => sum + h.totalValue, 0);\r\n  \r\n  return holdings.map(holding => ({\r\n    symbol: holding.symbol,\r\n    name: holding.name,\r\n    value: holding.totalValue,\r\n    percentage: Number(((holding.totalValue / totalValue) * 100).toFixed(1)),\r\n  }));\r\n}\r\n\r\nfunction generateTransactionHistory(holdings: any[]) {\r\n  const transactions = [];\r\n  const types = ['buy', 'sell', 'dividend'];\r\n  \r\n  // Generate 20-50 random transactions\r\n  const transactionCount = 20 + Math.floor(Math.random() * 30);\r\n  \r\n  for (let i = 0; i < transactionCount; i++) {\r\n    const holding = holdings[Math.floor(Math.random() * holdings.length)];\r\n    const type = types[Math.floor(Math.random() * types.length)];\r\n    const daysAgo = Math.floor(Math.random() * 90);\r\n    const date = new Date(Date.now() - daysAgo * 24 * 60 * 60 * 1000);\r\n    \r\n    let transaction: any = {\r\n      id: Math.random().toString(36).substr(2, 9),\r\n      symbol: holding.symbol,\r\n      name: holding.name,\r\n      type,\r\n      date: date.toISOString(),\r\n      status: 'completed',\r\n    };\r\n    \r\n    if (type === 'buy' || type === 'sell') {\r\n      const quantity = Math.floor(Math.random() * 50) + 1;\r\n      const price = holding.price * (0.9 + Math.random() * 0.2); // Â±10%\r\n      \r\n      transaction = {\r\n        ...transaction,\r\n        quantity,\r\n        price: Number(price.toFixed(2)),\r\n        total: Number((quantity * price).toFixed(2)),\r\n        fees: Number((quantity * price * 0.001).toFixed(2)), // 0.1% fee\r\n      };\r\n    } else if (type === 'dividend') {\r\n      transaction = {\r\n        ...transaction,\r\n        amount: Number((Math.random() * 100 + 10).toFixed(2)),\r\n        quantity: holding.shares,\r\n        dividendPerShare: Number((Math.random() * 2 + 0.5).toFixed(3)),\r\n      };\r\n    }\r\n    \r\n    transactions.push(transaction);\r\n  }\r\n  \r\n  return transactions.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}